"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2565],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=r,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(h,o(o({ref:n},c),{},{components:t})):a.createElement(h,o({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7471:(e,n,t)=>{t.r(n),t.d(n,{default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],l={id:"overview",title:"What's T-Regx?"},p={unversionedId:"overview",id:"overview",isDocsHomePage:!1,title:"What's T-Regx?",description:"Documentation for version: 0.41.2",source:"@site/../docs/overview.md",sourceDirName:".",slug:"/overview",permalink:"/docs/overview",version:"current",lastUpdatedAt:1672489628,formattedLastUpdatedAt:"12/31/2022",frontMatter:{id:"overview",title:"What's T-Regx?"},sidebar:"docs",next:{title:"Installation",permalink:"/docs/installation"}},s=[{value:"Example usages of T-Regx",id:"example-usages-of-t-regx",children:[{value:"Example usage of matching",id:"example-usage-of-matching",children:[]},{value:"Example usage of replacing",id:"example-usage-of-replacing",children:[]},{value:"Example usage of splitting",id:"example-usage-of-splitting",children:[]},{value:"Example of prepared patterns",id:"example-of-prepared-patterns",children:[]},{value:"Code completion with IDE",id:"code-completion-with-ide",children:[]}]},{value:"Error handling in T-Regx",id:"error-handling-in-t-regx",children:[{value:"Examples of a missing group",id:"examples-of-a-missing-group",children:[]},{value:"Examples of error handling in T-Regx",id:"examples-of-error-handling-in-t-regx",children:[]}]}],c={toc:s};function u(e){var n=e.components,l=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,l,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Documentation for version: 0.41.2"),(0,i.kt)("p",null,"T-Regx is a lightweight, high-level library for regular expressions in PHP. It's designed\nto be suitable for simple projects and enterprise solutions."),(0,i.kt)("p",null,'The name "T-Regx" is a combination of words "Regex" and "T-Rex" (Tyrannosaurus Rex).'),(0,i.kt)("p",null,"Main features of T-Regx are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Single-point entry ",(0,i.kt)("inlineCode",{parentName:"li"},"Pattern")," class"),(0,i.kt)("li",{parentName:"ul"},"Regular expressions without delimiters (so ",(0,i.kt)("inlineCode",{parentName:"li"},'Pattern::of("^foo")')," instead of ",(0,i.kt)("inlineCode",{parentName:"li"},'preg_match("/^foo/")'),")"),(0,i.kt)("li",{parentName:"ul"},"UTF-8 support out of the box"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/prepared-patterns"},"Prepared Patterns")," handling unsafe characters (e.g. user input, delicate values)"),(0,i.kt)("li",{parentName:"ul"},"Both replacing and matching is with detailed ",(0,i.kt)("a",{parentName:"li",href:"/docs/match"},(0,i.kt)("inlineCode",{parentName:"a"},"Detail"))," object"),(0,i.kt)("li",{parentName:"ul"},"Uses PHP regular expressions under the hood, but doesn't leak any of its interface or flaws")),(0,i.kt)("p",null,"Surpasses PHP in many ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Doesn't use PHP warning/error/notice/fatal system, uses only exceptions, for example ",(0,i.kt)("inlineCode",{parentName:"li"},"MalformedPatternException")),(0,i.kt)("li",{parentName:"ul"},"Doesn't use any flags, default arguments or varargs, everything is done with methods"),(0,i.kt)("li",{parentName:"ul"},"Doesn't return ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," on error, but throws a suitable exception instead (for example ",(0,i.kt)("inlineCode",{parentName:"li"},"NonexistentGroupException"),")"),(0,i.kt)("li",{parentName:"ul"},"Doesn't return ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," or ",(0,i.kt)("inlineCode",{parentName:"li"},'""')," to indicate an unmatched group, but uses ",(0,i.kt)("inlineCode",{parentName:"li"},"Group.matched()")," and other methods instead")),(0,i.kt)("h2",{id:"example-usages-of-t-regx"},"Example usages of T-Regx"),(0,i.kt)("h3",{id:"example-usage-of-matching"},"Example usage of matching"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\nuse TRegx\\CleanRegex\\Pattern;\n\n/**\n * Instantiate your pattern\n */\n$pattern = Pattern::of("^(f)oo");\n\n$matcher = $pattern->match($_GET[\'input\'])\n\nif ($matcher->fails()) {\n  die("Nothing matched!");\n}\n\n/**\n * @var Detail $detail\n */\nforeach ($matcher as $detail) {\n  $detail->text();   // matched text\n  $detail->offset(); // matched offset in characters, for bytes use byteOffset()\n  $detail->get(1);   // get first capturing group\n}\n\necho "Found " . $matcher->count() . " occurrences";\n\n/**\n * @var string[]\n */\n$splitElements = $pattern->split($_GET[\'input\']); // split by regular expression\n')),(0,i.kt)("p",null,"When calling multiple methods on the same ",(0,i.kt)("inlineCode",{parentName:"p"},"$matcher")," object, T-Regx doesn't make any unnecessary calls to underlying\nPHP implementations."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$match->all();   // calls `preg_match_all()` to return Detail[]\n$match->count(); // reuses the return value from the previous PHP call\n")),(0,i.kt)("h3",{id:"example-usage-of-replacing"},"Example usage of replacing"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nuse TRegx\\CleanRegex\\Pattern;\n\n/**\n * Instantiate your pattern\n */\n$pattern = Pattern::of(\"https?://(\\w+\\.\\w+)\");\n\n/**\n * Replace all matched occurrences\n */\n$replace = $pattern->replace($_GET['input'])\n\n/**\n * Replace with a constant value\n */\n$replace->with('XXX'); // censor all links in the input\n\n/**\n * Replace dynamically via callback\n */\n$replace->callback(function (Detail $detail): string {\n    return 'new';\n});\n\n/**\n * Replace with a group reference format\n */\n$replace->withReferences('://$1'); // censor links with group reference format\n")),(0,i.kt)("h3",{id:"example-usage-of-splitting"},"Example usage of splitting"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nuse TRegx\\CleanRegex\\Pattern;\n\n/**\n * Match a vertical pipe or a comma\n */\n$pattern = Pattern::of('[|,]');\n\n/**\n * Split all occurrences\n */\n$elements = $pattern->split($_GET['input']);\n\n/**\n * Split limited occurrences, from the start\n */\n[$first, $second, ...$rest] = $pattern->splitStart($_GET['input'], 2);\n\n/**\n * Split limited occurrences, from end\n */\n$elements = $pattern->splitEnd($_GET['input'], 2);\n")),(0,i.kt)("h3",{id:"example-of-prepared-patterns"},"Example of prepared patterns"),(0,i.kt)("p",null,"This example illustrates a pattern that allows us to match string enclosed in double quote ",(0,i.kt)("inlineCode",{parentName:"p"},'"'),"\nor a backtick ",(0,i.kt)("inlineCode",{parentName:"p"},"`"),", for example ",(0,i.kt)("inlineCode",{parentName:"p"},'"foo"')," or ",(0,i.kt)("inlineCode",{parentName:"p"},"`foo`"),", but not ",(0,i.kt)("inlineCode",{parentName:"p"},'"foo` ')," and not ",(0,i.kt)("inlineCode",{parentName:"p"},' `foo"'),"."),(0,i.kt)("p",null,"Additionally, we want the word to be anything we want, including data that potentially holds\nspecial regular expression values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\nuse TRegx\\CleanRegex\\Pattern;\n\n$word = "my.word"; // we want the period to be treated literally\n\n/**\n * Inject the value into @ placeholder in the pattern \n */\n$pattern = Pattern::inject(\'(["`])@\\1\', [$word]);\n\n$patter->test(\'content with "my.word"\'); // bool (true)\n$patter->test(\'content with "my!word"\'); // bool (false)\n')),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern.test()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if, and only if a pattern matches the given subject. In this example,\nwe can see that despite the dot character used in ",(0,i.kt)("inlineCode",{parentName:"p"},'"my.word"'),", the subject ",(0,i.kt)("inlineCode",{parentName:"p"},"'content with \"my!word\"'")," isn't matched."),(0,i.kt)("p",null,"That's because prepared patterns (such as patterns created with ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern::inject()"),") treat each value literally,\nnot as regular expression special characters."),(0,i.kt)("p",null,"You can read more about prepared patterns in ",(0,i.kt)("a",{parentName:"p",href:"/docs/prepared-patterns"},"Handling user input"),"."),(0,i.kt)("h3",{id:"code-completion-with-ide"},"Code completion with IDE"),(0,i.kt)("p",null,"Because ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern")," is designed with methods and objects, IDE suggestions can be very helpful when developing applications\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern"),". Proper suggestions from IDE reduce time spent of reading documentations and finding the correct\nsyntax or notation."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"code completion",src:t(6517).Z})),(0,i.kt)("h2",{id:"error-handling-in-t-regx"},"Error handling in T-Regx"),(0,i.kt)("h3",{id:"examples-of-a-missing-group"},"Examples of a missing group"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nuse TRegx\\CleanRegex\\Pattern;\n\n/**\n * Pattern with only one capturing group \n */\n$pattern = Pattern::of('(Foo)Bar');\n\n/**\n * Create matcher for a given subject\n */\n$matcher = $pattern->match('FooBar');\n\n/**\n * Perform one match on the subject\n */\n$firstDetail = $matcher->first();\n\n/**\n * Try and read a second group \n */\ntry {\n  $firstDetail->get(2);\n} catch (NonexistentGroupException $exception) {\n  echo \"There is no such group\";\n}\n")),(0,i.kt)("h3",{id:"examples-of-error-handling-in-t-regx"},"Examples of error handling in T-Regx"),(0,i.kt)("p",null,"T-Regx doesn't interfere with userspace in any way. After using ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Matcher")," with pattern\nor subject which can't be matched because of malformed unicode encoding, or perhaps because of\ncatastrophic backtracking, a suitable exception will be thrown, but the userspace will be left intact,\nso calling ",(0,i.kt)("inlineCode",{parentName:"p"},"preg_last_error()")," won't return errors."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\nuse TRegx\\CleanRegex\\Pattern;\n\n/**\n * Pattern with only one capturing group \n */\n$pattern = Pattern::of('(Foo)Bar', 'u');\n\n$invalidUnicodeSubject = \"\\xc3\\x28\";\n\ntry {\n  $matcher = $pattern->match($invalidUnicodeSubject)->first();\n} catch (SubjectEncodingException $exception) {\n  echo \"There is a unicode encoding error in the subject\";\n}\n\npreg_last_error(); // `PREG_NO_ERROR`\n")),(0,i.kt)("p",null,"T-Regx ",(0,i.kt)("strong",{parentName:"p"},"doesn't")," override error handlers or exception handlers, since that could greatly pollute userspace\nand render the client application less reliable."))}u.isMDXComponent=!0},6517:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/codeCompletion-4e22d25e5e5e20fd605c233a8d29cd85.png"}}]);
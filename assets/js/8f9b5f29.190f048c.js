"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4580],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=s(n),c=i,k=m["".concat(p,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},3388:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),l=["components"],o={title:"Release 0.9.2 - You're in for a treat!",author:"Daniel Wilkowski",authorFBID:0x5af34da0d14b},p={permalink:"/blog/2020/02/18/release-0.9.2",source:"@site/blog/2020-02-18-release-0.9.2.md",title:"Release 0.9.2 - You're in for a treat!",description:"\ud83d\ude0e T-Regx The Dinosaur is really proud to announce its first beta version! Despite the beta suffix, it's 100% suitable for production use. It doesn't have any known bugs - check out the issues. There is a few breaking changes (since that's a 0.* version), but there are also a looot of improvements and new feautres.",date:"2020-02-18T00:00:00.000Z",formattedDate:"February 18, 2020",tags:[],readingTime:2.34,truncated:!1,prevItem:{title:"Release 0.9.3 - Minor changes",permalink:"/blog/2020/02/22/release-0.9.3"},nextItem:{title:"Don't forget about T-Regx",permalink:"/blog/2019/10/15/dont-forget-about-t-regx"}},s=[],d={toc:s},m="wrapper";function u(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\ud83d\ude0e T-Regx The Dinosaur is really proud to announce its first beta version! Despite the beta suffix, it's 100% suitable for production use. It doesn't have any known bugs - check out the issues. There is a few breaking changes (since that's a 0.* version), but there are also a looot of improvements and new feautres.\nWhat's new in this release:"),(0,r.kt)("p",null,"Here's a release on github: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/T-Regx/T-Regx/releases/tag/v0.9.2"},"https://github.com/T-Regx/T-Regx/releases/tag/v0.9.2")," (see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/T-Regx/T-Regx/blob/develop/ChangeLog.md"},"Changelog.md"),")."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Breaking changes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Methods ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern()"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern::of()"),' no longer "magically" guess whether a pattern is delimited or not.\n',(0,r.kt)("inlineCode",{parentName:"li"},"Pattern::of()")," assumes pattern ",(0,r.kt)("em",{parentName:"li"},"is")," delimited, new ",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern::pcre()")," takes an old-school delimited pattern."),(0,r.kt)("li",{parentName:"ul"},"Constructor ",(0,r.kt)("inlineCode",{parentName:"li"},"new Pattern()")," is no longer a part of T-Regx API. Use ",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern::of()"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"pattern()")),(0,r.kt)("li",{parentName:"ul"},"Renamed ",(0,r.kt)("inlineCode",{parentName:"li"},"Match.parseInt()")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"Match.toInt()")," (the same for ",(0,r.kt)("inlineCode",{parentName:"li"},"MatchGroup"),")"),(0,r.kt)("li",{parentName:"ul"},"Removed ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern()->match()->test()"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"fails()"),". From now on, use ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern()->test()"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"fails()")),(0,r.kt)("li",{parentName:"ul"},"Removed ",(0,r.kt)("inlineCode",{parentName:"li"},"is()"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is()->delimited()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is()->usable()")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"is()->valid()")," is changed to ",(0,r.kt)("inlineCode",{parentName:"li"},"valid()")))),(0,r.kt)("li",{parentName:"ul"},"Removed ",(0,r.kt)("inlineCode",{parentName:"li"},"split()->ex()"),", changed ",(0,r.kt)("inlineCode",{parentName:"li"},"split()->inc()")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"split()")))),(0,r.kt)("li",{parentName:"ul"},"Features",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"Match.group().replace()")," \ud83d\udd25"),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern()->match()->fluent()")," \ud83d\udd25"),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern()->match()->asInt()")),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern()->match()->distinct()")," (leaves only unique matches)"),(0,r.kt)("li",{parentName:"ul"},"Added prepared pattern method ",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern::inject()"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern::bind()")," (see below)"),(0,r.kt)("li",{parentName:"ul"},"In ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern()->match()->groups()"),":",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"groups()->forEach()"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"iterate()")),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"groups()->flatMap()")),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"groups()->map()")),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"group()->fluent()")),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"groups()->names()")," (and ",(0,r.kt)("inlineCode",{parentName:"li"},"namedGroups()->names()"),")"),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"groups()->count()")," (and ",(0,r.kt)("inlineCode",{parentName:"li"},"namedGroups()->count()"),")"))),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"match()->offsets()->fluent()")),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"match()->group(string)->offsets()->fluent()")),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"pattern()->forArray()->strict()")," which throws for invalid values, instead of filtering them out"))),(0,r.kt)("li",{parentName:"ul"},"SafeRegex",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"preg::grep_keys()")," \ud83d\udd25, that works exactly like ",(0,r.kt)("inlineCode",{parentName:"li"},"preg::grep()"),", but filters by keys (also accepts ",(0,r.kt)("a",{parentName:"li",href:"https://www.php.net/manual/en/function.preg-grep.php"},(0,r.kt)("inlineCode",{parentName:"a"},"PREG_GREP_INVERT")),")"))),(0,r.kt)("li",{parentName:"ul"},"Enhancements/updates",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Method ",(0,r.kt)("inlineCode",{parentName:"li"},"by()->group()->orElse()")," now receives lazy-loaded ",(0,r.kt)("inlineCode",{parentName:"li"},"Match"),", instead of a subject"),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"withReferences()")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"CompositePattern.chainedReplace()")),(0,r.kt)("li",{parentName:"ul"},"Previously named ",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern::inject()")," is renamed to ",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern::bind()")),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern::bind()")," (old ",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern::inject()"),") still accepts values as an associative array, but new ",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern::inject()")," receives values without regard for the keys."),(0,r.kt)("li",{parentName:"ul"},"Fixed passing invalid types to ",(0,r.kt)("inlineCode",{parentName:"li"},"forArray()"),". Previously, caused fatal error due to internal ",(0,r.kt)("inlineCode",{parentName:"li"},"preg_grep()")," implementation."))),(0,r.kt)("li",{parentName:"ul"},"Other",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Now ",(0,r.kt)("inlineCode",{parentName:"li"},"MalformedPatternException")," is thrown, instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"CompileSafeRegexException"),", when using invalid PCRE syntax."),(0,r.kt)("li",{parentName:"ul"},"Returning ",(0,r.kt)("inlineCode",{parentName:"li"},"Match")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"replace()->callback()")," (instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"Match.text()")," as ",(0,r.kt)("inlineCode",{parentName:"li"},"string"),")"),(0,r.kt)("li",{parentName:"ul"},"Match ",(0,r.kt)("inlineCode",{parentName:"li"},"+12")," is no longer considered a valid integer for ",(0,r.kt)("inlineCode",{parentName:"li"},"isInt()"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"toInt()")),(0,r.kt)("li",{parentName:"ul"},"Unnamed group will be represented as ",(0,r.kt)("inlineCode",{parentName:"li"},"null")," in ",(0,r.kt)("inlineCode",{parentName:"li"},"Match.groupNames()"),", instead of being simply ignored"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"helper()")," method, ",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"PatternBuilder")," now return interface ",(0,r.kt)("inlineCode",{parentName:"li"},"PatternInterface"),", instead of ",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern")," class.\n",(0,r.kt)("inlineCode",{parentName:"li"},"Pattern")," class now only holds static utility methods, and ",(0,r.kt)("inlineCode",{parentName:"li"},"PatternImpl")," holds the pattern implementation."))),(0,r.kt)("li",{parentName:"ul"},"Maintenance",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"PhpUnit throws different exceptions because of ",(0,r.kt)("a",{parentName:"li",href:"https://wiki.php.net/rfc/tostring_exceptions"},"PHP ",(0,r.kt)("inlineCode",{parentName:"a"},"__toString()")," exception policy change"),".")))),(0,r.kt)("p",null,"Footnote:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Apart from PHP type hints, every version up to this point could be run on PHP 5.3 (if one removes type hints from\ncode, one can run T-Regx on PHP 5.3). Every error, exception, malfunction, inconsistency was handled correctly by\nT-Regx. From this version on (",(0,r.kt)("inlineCode",{parentName:"li"},"0.9.2"),"), handling of the errors and inconsistencies is dropped, since T-Regx now\nonly supports PHP 7.1.")),(0,r.kt)("p",null,"Hope you guys will like and enjoy it!"))}u.isMDXComponent=!0}}]);
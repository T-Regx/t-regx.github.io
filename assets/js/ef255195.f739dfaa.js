"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4825],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(r),u=a,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return r?n.createElement(f,p(p({ref:t},c),{},{components:r})):n.createElement(f,p({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,p=new Array(i);p[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:a,p[1]=o;for(var s=2;s<i;s++)p[s]=r[s];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},92:(e,t,r)=>{r.d(t,{x:()=>l});var n=r(7294),a=r(5558);const i="code_JkvM",p=function(e){var t=e.children,r=e.language;return n.createElement("div",{className:i},n.createElement(a.Z,{className:"language-"+(r||"php")},function(e){if("string"==typeof e)return e;if(!Array.isArray(e))throw console.log(this.props.children),"Unexpected child of <Code>";if(e.every((function(e){return"string"==typeof e})))return e.join("")}(t)))};const o="result_6Tn1",l=function(e){var t=e.text,r=e.children;return n.createElement("div",{className:o},n.createElement(p,{language:t?"text":"php"},r))}},1115:(e,t,r)=>{r.r(t),r.d(t,{default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),p=r(92),o=["components"],l={id:"delimiters",title:"Delimited patterns"},s={unversionedId:"delimiters",id:"delimiters",isDocsHomePage:!1,title:"Delimited patterns",description:"Delimited pattern",source:"@site/../docs/delimiters.mdx",sourceDirName:".",slug:"/delimiters",permalink:"/docs/delimiters",version:"current",lastUpdatedAt:1682633249,formattedLastUpdatedAt:"4/27/2023",frontMatter:{id:"delimiters",title:"Delimited patterns"},sidebar:"docs",previous:{title:"Multiple patterns",permalink:"/docs/pattern-list"},next:{title:"Split a string",permalink:"/docs/split"}},c=[{value:"Delimited pattern",id:"delimited-pattern",children:[]},{value:"PCRE-style patterns",id:"pcre-style-patterns",children:[]},{value:"Modifiers",id:"modifiers",children:[]}],d={toc:c},m="wrapper";function u(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)(m,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"delimited-pattern"},"Delimited pattern"),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern.delimited()")," returns regular expression as ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),",\nrepresenting the pattern in format compatible with with ",(0,i.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/ref.pcre.php"},"PHP PCRE methods"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"echo pattern('https://github.com#heading')->delimited();\n")),(0,i.kt)(p.x,{text:!0,mdxType:"Result"},"%https://github.com#heading%"),(0,i.kt)("h2",{id:"pcre-style-patterns"},"PCRE-style patterns"),(0,i.kt)("p",null,"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern")," was constructed with ",(0,i.kt)("a",{parentName:"p",href:"/docs/introduction-preg#entry-points"},(0,i.kt)("inlineCode",{parentName:"a"},"PcrePattern::of()")),", method ",(0,i.kt)("inlineCode",{parentName:"p"},"delimited()")," returns the pattern unchanged."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"PcrePattern::of('#Welcome/Or not#')->delimited();\n")),(0,i.kt)(p.x,{text:!0,mdxType:"Result"},"#Welcome/Or not#"),(0,i.kt)("p",null,"However, certain regular expressions will be modified to allow safe execution. For example, pattern ",(0,i.kt)("inlineCode",{parentName:"p"},"/\\c\\/"),(0,i.kt)("br",{parentName:"p"}),"\n","fails matching in vanilla PHP, so such pattern is delimited in other ways, to ensure proper execution."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"preg_match('/\\c\\/', $subject); // fails matching\nPcrePattern::of('/\\c\\/')->test($subject); // works just fine\n")),(0,i.kt)("h2",{id:"modifiers"},"Modifiers"),(0,i.kt)("p",null,"There are two ways of using patterns with PCRE modifiers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Either pass a second argument to ",(0,i.kt)("a",{parentName:"p",href:"/docs/introduction-preg#entry-points"},(0,i.kt)("inlineCode",{parentName:"a"},"pattern()")),"/",(0,i.kt)("a",{parentName:"p",href:"/docs/introduction-preg#entry-points"},(0,i.kt)("inlineCode",{parentName:"a"},"Pattern::of()")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"// global function\npattern('[A-Z][a-z]+', 'i')->test($subject);\n\n// static method\nPattern::of('[A-Z][a-z]+', 'i')->test($subject);\n\n// prepared patterns\nPattern::inject('[A-Z]@', [$_GET['name']], 'i')->test($subject);\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"or use an old-school pattern:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"PcrePattern::of('/[A-Z][a-z]+/i')->search($subject)->first();\n")))))}u.isMDXComponent=!0}}]);
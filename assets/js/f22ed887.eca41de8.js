"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4139],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),p=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=p(a),f=r,u=m["".concat(c,".").concat(f)]||m[f]||d[f]||o;return a?n.createElement(u,s(s({ref:t},l),{},{components:a})):n.createElement(u,s({ref:t},l))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},92:(e,t,a)=>{a.d(t,{x:()=>c});var n=a(7294),r=a(5558);const o="code_JkvM",s=function(e){var t=e.children,a=e.language;return n.createElement("div",{className:o},n.createElement(r.Z,{className:"language-"+(a||"php")},function(e){if("string"==typeof e)return e;if(!Array.isArray(e))throw console.log(this.props.children),"Unexpected child of <Code>";if(e.every((function(e){return"string"==typeof e})))return e.join("")}(t)))};const i="result_6Tn1",c=function(e){var t=e.text,a=e.children;return n.createElement("div",{className:i},n.createElement(s,{language:t?"text":"php"},a))}},6157:(e,t,a)=>{a.r(t),a.d(t,{default:()=>m,frontMatter:()=>c,metadata:()=>p,toc:()=>l});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),s=a(92),i=["components"],c={id:"match-offsets",title:"Match offsets"},p={unversionedId:"match-offsets",id:"match-offsets",isDocsHomePage:!1,title:"Match offsets",description:"There are several ways to read offsets of your matched occurrences and your capturing groups.",source:"@site/../docs/match-offsets.mdx",sourceDirName:".",slug:"/match-offsets",permalink:"/docs/match-offsets",version:"current",lastUpdatedAt:1665498213,formattedLastUpdatedAt:"10/11/2022",frontMatter:{id:"match-offsets",title:"Match offsets"},sidebar:"docs",previous:{title:"Capturing groups",permalink:"/docs/match-groups"},next:{title:"Handling integers",permalink:"/docs/match-as-int"}},l=[{value:"Using Detail",id:"using-detail",children:[{value:"Using Detail",id:"using-detail-1",children:[]}]}],d={toc:l};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"There are several ways to read offsets of your matched occurrences and your capturing groups."),(0,o.kt)("h2",{id:"using-detail"},"Using ",(0,o.kt)("a",{parentName:"h2",href:"/docs/match-details"},(0,o.kt)("inlineCode",{parentName:"a"},"Detail"))),(0,o.kt)("p",null,"If you use ",(0,o.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,o.kt)("inlineCode",{parentName:"a"},"Detail"))," object (like the one passed to ",(0,o.kt)("a",{parentName:"p",href:"/docs/match-for-each"},(0,o.kt)("inlineCode",{parentName:"a"},"forEach()"))," or ",(0,o.kt)("a",{parentName:"p",href:"/docs/match-map"},(0,o.kt)("inlineCode",{parentName:"a"},"map()"))," callback) you can just use\n",(0,o.kt)("a",{parentName:"p",href:"/docs/match-details#offsets"},(0,o.kt)("inlineCode",{parentName:"a"},"offset()"))," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$detail = pattern('\\d+')->match('I was born in 1996')->first();\nreturn 'Match was found at ' . $detail->offset();\n")),(0,o.kt)(s.x,{mdxType:"Result"},"'Match was found at 14'"),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Method ",(0,o.kt)("a",{parentName:"p",href:"/docs/match-details#offsets"},(0,o.kt)("inlineCode",{parentName:"a"},"offset()"))," is UTF-8 safe and returns offsets in characters, not bytes.\nFor bytes, consider using ",(0,o.kt)("a",{parentName:"p",href:"/docs/match-details#offsets"},(0,o.kt)("inlineCode",{parentName:"a"},"byteOffset()"))," method."))),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Use ",(0,o.kt)("a",{parentName:"p",href:"/docs/match-details#offsets"},(0,o.kt)("inlineCode",{parentName:"a"},"offset()"))," with multibyte-safe methods like ",(0,o.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.mb-substr.php"},(0,o.kt)("inlineCode",{parentName:"a"},"mb_substr()")),", and ",(0,o.kt)("a",{parentName:"p",href:"/docs/match-details#offsets"},(0,o.kt)("inlineCode",{parentName:"a"},"byteOffset()"))," with methods like ",(0,o.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.substr.php"},(0,o.kt)("inlineCode",{parentName:"a"},"substr()")),"."))),(0,o.kt)("h3",{id:"using-detail-1"},"Using ",(0,o.kt)("a",{parentName:"h3",href:"/docs/match-details"},(0,o.kt)("inlineCode",{parentName:"a"},"Detail"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$detail = pattern('(?<capital>[A-Z])[a-z]+')->match('my name is John Cena')->first();\nreturn $detail->group('capital')->offset();\n")),(0,o.kt)(s.x,{mdxType:"Result"},"11"))}m.isMDXComponent=!0}}]);
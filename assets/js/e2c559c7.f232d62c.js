"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3129],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},92:(e,t,n)=>{n.d(t,{x:()=>p});var r=n(7294),a=n(5558);const i="code_JkvM",l=function(e){var t=e.children,n=e.language;return r.createElement("div",{className:i},r.createElement(a.Z,{className:"language-"+(n||"php")},function(e){if("string"==typeof e)return e;if(!Array.isArray(e))throw console.log(this.props.children),"Unexpected child of <Code>";if(e.every((function(e){return"string"==typeof e})))return e.join("")}(t)))};const o="result_6Tn1",p=function(e){var t=e.text,n=e.children;return r.createElement("div",{className:o},r.createElement(l,{language:t?"text":"php"},n))}},5872:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m,frontMatter:()=>p,metadata:()=>s,toc:()=>c});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=n(92),o=["components"],p={id:"filter",title:"Filtering an array"},s={unversionedId:"filter",id:"filter",isDocsHomePage:!1,title:"Filtering an array",description:"Documentation for version: 0.41.2",source:"@site/../docs/filter.mdx",sourceDirName:".",slug:"/filter",permalink:"/docs/filter",version:"current",lastUpdatedAt:1682633299,formattedLastUpdatedAt:"4/27/2023",frontMatter:{id:"filter",title:"Filtering an array"},sidebar:"docs",previous:{title:"Split a string",permalink:"/docs/split"},next:{title:"Capturing groups - in depth",permalink:"/docs/match-groups-in-depth"}},c=[{value:"Inversely filtering an array",id:"inversely-filtering-an-array",children:[]},{value:"Stable filtering",id:"stable-filtering",children:[]}],u={toc:c},d="wrapper";function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Documentation for version: 0.41.2"),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern.filter()")," returns a new, sequential array containing only values which match the given pattern."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/*\n * Instantiate pattern\n */\n$pattern = Pattern::of('[A-Z][a-z]+$');\n\n/*\n * Populate the array\n */\n$array = [\n  'Mark',\n  'Robert',\n  'lorem impsum',\n  'Jane',\n  'FooBar123'\n];\n\n/*\n * Filter the array by matching the pattern\n */\n$pattern->filter($array);\n")),(0,i.kt)(l.x,{php:!0,mdxType:"Result"},"['Mark', 'Robert', 'Jane'] "),(0,i.kt)("p",null,"More precisely, ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern.filter()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"[0 => 'Mark', 1 => 'Robert', 2 => 'Jane']"),", even though\nthe original key for ",(0,i.kt)("inlineCode",{parentName:"p"},"'Jane'")," was ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,i.kt)("p",null,"Only values of type ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," are allowed in the array as the argument for ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern.filter()"),". Passing\nan array with a value of any other type than ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," issues ",(0,i.kt)("inlineCode",{parentName:"p"},"\\InvalidArgumentException"),"."),(0,i.kt)("p",null,"The resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"array")," contains subjects for which calling ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern.test()")," on the same ",(0,i.kt)("inlineCode",{parentName:"p"},"$pattern"),"\nreturns ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),". The elements which are no longer present in the resulting array, are subjects for\nwhich calling ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern.test()")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("h2",{id:"inversely-filtering-an-array"},"Inversely filtering an array"),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern.reject()")," returns a new, sequential array containing only values which do not match\nthe given pattern."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/*\n * Instantiate pattern\n */\n$pattern = Pattern::of('[A-Za-z]+$');\n\n/*\n * Populate the array\n */\n$array = [\n  'Mark',\n  'Robert',\n  '123',\n  'Jane',\n  '4567'\n];\n\n/*\n * Inversely filter the array by matching the pattern\n */\n$pattern->reject($array);\n")),(0,i.kt)("p",null,"Only values of type ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," are allowed in the array as the argument for ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern.reject()"),". Passing\nan array with a value of any other type than ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," issues ",(0,i.kt)("inlineCode",{parentName:"p"},"\\InvalidArgumentException"),"."),(0,i.kt)("h2",{id:"stable-filtering"},"Stable filtering"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Pattern.filter()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern.reject()"),' can be interpreted as what\'s called a "stable filtering". What\nit means, is that if the input array contains multiple occurrences of the same ',(0,i.kt)("inlineCode",{parentName:"p"},"string")," subject,\nthen exactly as many subject ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," is returned."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"/*\n * Instantiate pattern\n */\n$pattern = Pattern::of('\\w+');\n\n/*\n * Populate the array\n */\n$array = ['one', 'one', 'two'];\n\n/*\n * Filter the array\n */\n$filtered = $pattern->filter($array);\n")),(0,i.kt)("p",null,"The array ",(0,i.kt)("inlineCode",{parentName:"p"},"$filtered")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"[0 => 'one', 1 => 'one']"),"."),(0,i.kt)("p",null,'Another characteristic of "stable filtering" is that the order items in the input array doesn\'t change after\nthe filtering. More precisely - for any two items in the array, one item ',(0,i.kt)("inlineCode",{parentName:"p"},"A")," preceding the other item ",(0,i.kt)("inlineCode",{parentName:"p"},"B"),";\nthen item ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," also precedes item ",(0,i.kt)("inlineCode",{parentName:"p"},"B")," in the filtered array."))}m.isMDXComponent=!0}}]);
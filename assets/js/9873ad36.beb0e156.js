"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[532],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},p=Object.keys(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)n=p[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,p=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=m(n),c=r,h=s["".concat(o,".").concat(c)]||s[c]||d[c]||p;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var p=n.length,i=new Array(p);i[0]=s;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var m=2;m<p;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},4962:(e,t,n)=>{n.r(t),n.d(t,{default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var a=n(7462),r=n(3366),p=(n(7294),n(3905)),i=["components"],l={id:"match-groups-in-depth",title:"Capturing groups - in depth"},o={unversionedId:"match-groups-in-depth",id:"match-groups-in-depth",isDocsHomePage:!1,title:"Capturing groups - in depth",description:"In plain, old, vanilla PHP there's no difference between:",source:"@site/../docs/match-groups-in-depth.md",sourceDirName:".",slug:"/match-groups-in-depth",permalink:"/docs/match-groups-in-depth",version:"current",lastUpdatedAt:1667226520,formattedLastUpdatedAt:"10/31/2022",frontMatter:{id:"match-groups-in-depth",title:"Capturing groups - in depth"},sidebar:"docs",previous:{title:"Exception structure",permalink:"/docs/exception-structure"},next:{title:"Capturing groups - J modifier",permalink:"/docs/match-groups-j-modifier"}},m=[],u={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,p.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("p",null,"In plain, old, vanilla PHP there's no difference between:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"an invalid group (name ",(0,p.kt)("inlineCode",{parentName:"li"},"2group")," or index ",(0,p.kt)("inlineCode",{parentName:"li"},"-1"),")"),(0,p.kt)("li",{parentName:"ul"},"valid, but non-existent group"),(0,p.kt)("li",{parentName:"ul"},"existent, but not matched group"),(0,p.kt)("li",{parentName:"ul"},"matched group, but value is ",(0,p.kt)("inlineCode",{parentName:"li"},"''")," (empty string)")),(0,p.kt)("p",null,"The two first cases always return ",(0,p.kt)("inlineCode",{parentName:"p"},"null"),", the third one returns either ",(0,p.kt)("inlineCode",{parentName:"p"},"''")," or ",(0,p.kt)("inlineCode",{parentName:"p"},"null")," (depending on the ",(0,p.kt)("strong",{parentName:"p"},"order of\ngroups!"),"). If you used ",(0,p.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/pcre.constants.php"},(0,p.kt)("inlineCode",{parentName:"a"},"PREG_OFFSET_CAPTURE")),", it'll return ",(0,p.kt)("inlineCode",{parentName:"p"},"['', -1]")," instead (so you need to compare the offset to ",(0,p.kt)("inlineCode",{parentName:"p"},"-1"),").\nMatched empty string, of course, returns ",(0,p.kt)("inlineCode",{parentName:"p"},"''")," (which might the same as the third)."),(0,p.kt)("p",null,"Also, ",(0,p.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/pcre.constants.php"},(0,p.kt)("inlineCode",{parentName:"a"},"PREG_OFFSET_CAPTURE"))," for ",(0,p.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.preg-match-all.php"},(0,p.kt)("inlineCode",{parentName:"a"},"preg_match_all()"))," works fine, but for ",(0,p.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.preg-match.php"},(0,p.kt)("inlineCode",{parentName:"a"},"preg_match()")),", if it's the last entry, it will\nnot be an ",(0,p.kt)("inlineCode",{parentName:"p"},"array"),", but an empty string instead ;|"),(0,p.kt)("p",null,"Since PHP 7.2, there's ",(0,p.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/pcre.constants.php"},(0,p.kt)("inlineCode",{parentName:"a"},"PREG_UNMATCHED_AS_NULL"))," - it's a little better, it allows distinguishing an unmatched subject\nfrom a matched empty string, but to distinguish invalid and non-existent groups from unmatched - you have to use ",(0,p.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.array-key-exists.php"},(0,p.kt)("inlineCode",{parentName:"a"},"array_key_exists()")),"."),(0,p.kt)("p",null,"For ",(0,p.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.preg-match.php"},(0,p.kt)("inlineCode",{parentName:"a"},"preg_match()")),"/",(0,p.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.preg-match-all.php"},(0,p.kt)("inlineCode",{parentName:"a"},"preg_match_all()"))," we can use ",(0,p.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/pcre.constants.php"},(0,p.kt)("inlineCode",{parentName:"a"},"PREG_UNMATCHED_AS_NULL")),", for ",(0,p.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.preg-replace-callback.php"},(0,p.kt)("inlineCode",{parentName:"a"},"preg_replace_callback()"))," we\nhave... nothing. There's no way to verify it in vanilla-PHP."),(0,p.kt)("p",null,"And T-Regx ",(0,p.kt)("strong",{parentName:"p"},"hates")," it. So we fixed it all."),(0,p.kt)("p",null,"That's why in T-Regx, ",(0,p.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,p.kt)("inlineCode",{parentName:"a"},"Detail"))," has 3 separate methods to deal with each of these cases separately."),(0,p.kt)("p",null,"Of course, the interface of ",(0,p.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,p.kt)("inlineCode",{parentName:"a"},"Detail"))," is the same for matching, replacing and any other operation (unlike vanilla-PHP),\nso validation of groups in T-Regx works completely alike for ",(0,p.kt)("a",{parentName:"p",href:"/docs/match"},(0,p.kt)("inlineCode",{parentName:"a"},"pattern()->match()")),", ",(0,p.kt)("a",{parentName:"p",href:"/docs/replace"},(0,p.kt)("inlineCode",{parentName:"a"},"pattern()->replace()"))," and any other\nmethod. ",(0,p.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,p.kt)("inlineCode",{parentName:"a"},"Detail"))," always has the same interface and works exactly alike, no matter where it was used."),(0,p.kt)("p",null,"Here's how they work:"),(0,p.kt)("table",null,(0,p.kt)("thead",{parentName:"table"},(0,p.kt)("tr",{parentName:"thead"},(0,p.kt)("th",{parentName:"tr",align:null},"Group"),(0,p.kt)("th",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"th"},"hasGroup()")),(0,p.kt)("th",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"th"},"matched()")),(0,p.kt)("th",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"th"},"text()")))),(0,p.kt)("tbody",{parentName:"table"},(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"Invalid group"),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("a",{parentName:"td",href:"https://www.php.net/manual/en/class.invalidargumentexception.php"},(0,p.kt)("inlineCode",{parentName:"a"},"\\InvalidArgumentException"))),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("a",{parentName:"td",href:"https://www.php.net/manual/en/class.invalidargumentexception.php"},(0,p.kt)("inlineCode",{parentName:"a"},"\\InvalidArgumentException"))),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("a",{parentName:"td",href:"https://www.php.net/manual/en/class.invalidargumentexception.php"},(0,p.kt)("inlineCode",{parentName:"a"},"\\InvalidArgumentException")))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"Nonexistent group"),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"false")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"NonexistentGroupException")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"NonexistentGroupException"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"Not matched group"),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"true")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"false")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"GroupNotMatchedException"))),(0,p.kt)("tr",{parentName:"tbody"},(0,p.kt)("td",{parentName:"tr",align:null},"Matched group"),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"true")),(0,p.kt)("td",{parentName:"tr",align:null},(0,p.kt)("inlineCode",{parentName:"td"},"true")),(0,p.kt)("td",{parentName:"tr",align:null},"Value of the group")))),(0,p.kt)("p",null,"In short:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},"You're protected from using an invalid group (",(0,p.kt)("inlineCode",{parentName:"li"},"2startingWithDigit")," or negative ",(0,p.kt)("inlineCode",{parentName:"li"},"-1"),")"),(0,p.kt)("li",{parentName:"ul"},"You're protected from using a non-existent method (except with ",(0,p.kt)("inlineCode",{parentName:"li"},"hasGroup()"),")"),(0,p.kt)("li",{parentName:"ul"},"You're protected from using a non-matched group (except with ",(0,p.kt)("inlineCode",{parentName:"li"},"hasGroup()")," and with ",(0,p.kt)("inlineCode",{parentName:"li"},"matched()"),")")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3129],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>f});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var s=a.createContext({}),c=function(e){var r=a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=c(e.components);return a.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(t),f=n,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||i;return t?a.createElement(d,l(l({ref:r},p),{},{components:t})):a.createElement(d,l({ref:r},p))}));function f(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var s in r)hasOwnProperty.call(r,s)&&(o[s]=r[s]);o.originalType=e,o.mdxType="string"==typeof e?e:n,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1755:(e,r,t)=>{t.d(r,{O2:()=>y,x4:()=>k});var a=t(7294),n=t(944),i=t(6010);const l="tabItem_vU9c",o="tabItemActive_cw6a";var s=37,c=39;const p=function(e){var r=e.lazy,t=e.block,p=e.defaultValue,u=e.values,m=e.groupId,f=e.className,d=(0,n.Z)(),y=d.tabGroupChoices,v=d.setTabGroupChoices,h=(0,a.useState)(p),k=h[0],b=h[1],g=a.Children.toArray(e.children),x=[];if(null!=m){var N=y[m];null!=N&&N!==k&&u.some((function(e){return e.value===N}))&&b(N)}var O=function(e){var r=e.currentTarget,t=x.indexOf(r),a=u[t].value;b(a),null!=m&&(v(m,a),setTimeout((function(){var e,t,a,n,i,l,s,c;(e=r.getBoundingClientRect(),t=e.top,a=e.left,n=e.bottom,i=e.right,l=window,s=l.innerHeight,c=l.innerWidth,t>=0&&i<=c&&n<=s&&a>=0)||(r.scrollIntoView({block:"center",behavior:"smooth"}),r.classList.add(o),setTimeout((function(){return r.classList.remove(o)}),2e3))}),150))},C=function(e){var r,t;switch(e.keyCode){case c:var a=x.indexOf(e.target)+1;t=x[a]||x[0];break;case s:var n=x.indexOf(e.target)-1;t=x[n]||x[x.length-1]}null==(r=t)||r.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},f)},u.map((function(e){var r=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:k===r?0:-1,"aria-selected":k===r,className:(0,i.Z)("tabs__item",l,{"tabs__item--active":k===r}),key:r,ref:function(e){return x.push(e)},onKeyDown:C,onFocus:O,onClick:O},t)}))),r?(0,a.cloneElement)(g.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},g.map((function(e,r){return(0,a.cloneElement)(e,{key:r,hidden:e.props.value!==k})}))))};const u=function(e){var r=e.children,t=e.hidden,n=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:n},r)};var m=t(5558);const f="code_JkvM",d=function(e){var r=e.children,t=e.language;return a.createElement("div",{className:f},a.createElement(m.Z,{className:"language-"+(t||"php")},function(e){if("string"==typeof e)return e;if(!Array.isArray(e))throw console.log(this.props.children),"Unexpected child of <Code>";if(e.every((function(e){return"string"==typeof e})))return e.join("")}(r)))};const y=function(e){var r=e.tregx,t=e.php;return a.createElement(p,{defaultValue:"t-regx",values:v(r,t)},r&&a.createElement(u,{value:"t-regx"},a.createElement(d,null,r)),t&&a.createElement(u,{value:"php"},a.createElement(d,null,t)))};function v(e,r){return[e?{label:"T-Regx",value:"t-regx"}:{},r?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}))}const h="result_6Tn1",k=function(e){var r=e.text,t=e.children;return a.createElement("div",{className:h},a.createElement(d,{language:r?"text":"php"},t))}},5872:(e,r,t)=>{t.r(r),t.d(r,{default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var a=t(7462),n=t(3366),i=(t(7294),t(3905)),l=t(1755),o=["components"],s={id:"filter",title:"Filter an array"},c={unversionedId:"filter",id:"filter",isDocsHomePage:!1,title:"Filter an array",description:"Filtering an array, returns a new array with only the values that match the pattern.",source:"@site/../docs/filter.mdx",sourceDirName:".",slug:"/filter",permalink:"/docs/filter",version:"current",lastUpdatedAt:1665421270,formattedLastUpdatedAt:"10/10/2022",frontMatter:{id:"filter",title:"Filter an array"},sidebar:"docs",previous:{title:"Split a string",permalink:"/docs/split"},next:{title:"Iterator",permalink:"/docs/match-iterator"}},p=[{value:"Filter a regular array",id:"filter-a-regular-array",children:[]},{value:"Filter an associative array",id:"filter-an-associative-array",children:[]},{value:"Filter by keys",id:"filter-by-keys",children:[]}],u={toc:p};function m(e){var r=e.components,t=(0,n.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Filtering an array, returns a new array with only the values that match the pattern."),(0,i.kt)("p",null,"Available methods for ",(0,i.kt)("inlineCode",{parentName:"p"},"pattern()->forArray()")," are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#filter-a-regular-array"},(0,i.kt)("inlineCode",{parentName:"a"},"filter()"))," - filters an array by values"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#filter-an-associative-array"},(0,i.kt)("inlineCode",{parentName:"a"},"filterAssoc()"))," - filters an array by values, preserving keys (associative array)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#filter-by-keys"},(0,i.kt)("inlineCode",{parentName:"a"},"filterByKeys()"))," - filters an array by keys")),(0,i.kt)("h2",{id:"filter-a-regular-array"},"Filter a regular array"),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"filter()")," filters an array and returns values ",(0,i.kt)("strong",{parentName:"p"},"re-indexed")," to match the removed elements (unlike ",(0,i.kt)("inlineCode",{parentName:"p"},"array_filter()"),")."),(0,i.kt)(l.O2,{tregx:"pattern('[A-Z][a-z]+$')\n    ->forArray([\n        'Mark',\n        'Robert',\n        'lorem impsum',\n        'Jane',\n        'FooBar123'\n    ])\n    ->filter();",php:"$input = [\n    'Mark',\n    'Robert',\n    'lorem impsum',\n    'Jane',\n    'FooBar123'\n];\narray_values(preg::grep(\"/[A-Z][a-z]+$/\", $input));",mdxType:"CodeTabs"}),(0,i.kt)(l.x4,{php:!0,mdxType:"Result"},"['Mark', 'Robert', 'Jane'] "),(0,i.kt)("p",null,"More precisely it returns ",(0,i.kt)("inlineCode",{parentName:"p"},"[0 => 'Mark', 1 => 'Robert', 2 => 'Jane']"),", even though original key for ",(0,i.kt)("inlineCode",{parentName:"p"},"'Jane'")," was ",(0,i.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,i.kt)("h2",{id:"filter-an-associative-array"},"Filter an associative array"),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"filterAssoc()")," works similarly to ",(0,i.kt)("inlineCode",{parentName:"p"},"filter()"),", but it preserves the array keys:"),(0,i.kt)(l.O2,{tregx:"pattern('[A-Z][a-z]+$')\n    ->forArray([\n        'm' => 'Mark',\n        'r' => 'Robert',\n        'l' => 'lorem impsum',\n        'j' => 'Jane',\n        's' => 'FooBar123'\n    ])\n    ->filterAssoc();",php:"$input = [\n    'm' => 'Mark',\n    'r' => 'Robert',\n    'l' => 'lorem impsum',\n    'j' => 'Jane',\n    's' => 'FooBar123'\n];\npreg::grep(\"/[A-Z][a-z]+$/\", $input);",mdxType:"CodeTabs"}),(0,i.kt)(l.x4,{php:!0,mdxType:"Result"},"['m' => 'Mark', 'r' => 'Robert', 'j' => 'Jane']"),(0,i.kt)("h2",{id:"filter-by-keys"},"Filter by keys"),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"filter()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"filterAssoc()"),", only array values are being used to filter the array. With ",(0,i.kt)("inlineCode",{parentName:"p"},"filterByKeys()"),", it's the array keys that are used to filter the array. The corresponding values (which can be of type ",(0,i.kt)("inlineCode",{parentName:"p"},"mixed"),") are returned unchanged:"),(0,i.kt)(l.O2,{tregx:"pattern('[A-Z][a-z]+$')\n    ->forArray([\n        'Mark'          => 'm',\n        'Robert'        => 'r',\n        'lorem impsum'  => 'l',\n        'Jane'          => 'j',\n        'FooBar123'     => 'f'\n    ])\n    ->filterByKeys();",php:"$input = [\n    'Mark'         => 'm',\n    'Robert'       => 'r',\n    'lorem impsum' => 'l',\n    'Jane'         => 'j',\n    'FooBar123'    => 'f'\n];\n$filteredKeys = preg::grep(\"/[A-Z][a-z]+$/\", array_keys($input));\narray_intersect_key($input, array_flip($filteredKeys));",mdxType:"CodeTabs"}),(0,i.kt)(l.x4,{php:!0,mdxType:"Result"},"['Mark' => 'm', 'Robert' => 'r', 'Jane' => 'j']"))}m.isMDXComponent=!0}}]);
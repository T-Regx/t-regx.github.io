"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7363],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4898:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={title:"Match details update",author:"Daniel Wilkowski",authorFBID:0x5af34da0d14b},p={permalink:"/blog/2019/01/31/match-details-update",source:"@site/blog/2019-01-31-match-details-update.md",title:"Match details update",description:"Most changes in T-Regx since the last Blog post were to Match details. We",date:"2019-01-31T00:00:00.000Z",formattedDate:"January 31, 2019",tags:[],readingTime:.64,truncated:!1,prevItem:{title:"The best Stargazers!",permalink:"/blog/2019/06/05/stargazers"},nextItem:{title:"Santa Clause Day Update",permalink:"/blog/2018/12/06/santa-clause-update"}},s=[],c={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Most changes in T-Regx since the last Blog post were to ",(0,i.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,i.kt)("inlineCode",{parentName:"a"},"Match")," details"),". We\nadded ",(0,i.kt)("a",{parentName:"p",href:"/docs/match-details#user-data"},"user data")," (",(0,i.kt)("a",{parentName:"p",href:"/docs/match-details#user-data"},(0,i.kt)("inlineCode",{parentName:"a"},"getUserData()"),"/",(0,i.kt)("inlineCode",{parentName:"a"},"setUserData()")),")\nwhich can be used in chained calls (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"filter()->map()"),")."),(0,i.kt)("p",null,"The second change is ",(0,i.kt)("a",{parentName:"p",href:"/docs/match-details#integers"},(0,i.kt)("inlineCode",{parentName:"a"},"isInt()"),"/",(0,i.kt)("inlineCode",{parentName:"a"},"parseInt()")),' which allow you to handle "real" integers safetly -\nwithout the fear of "PHP smart" integers (e.g. PHP thinks that ',(0,i.kt)("inlineCode",{parentName:"p"},'"1e3"')," is ",(0,i.kt)("inlineCode",{parentName:"p"},"1000"),"). T-Regx understands that robust applications\ncan't allow numbers to be ",(0,i.kt)("inlineCode",{parentName:"p"},"10e4")," - it should be treated as an invalid integer by default!"),(0,i.kt)("p",null,"And last, ",(0,i.kt)("inlineCode",{parentName:"p"},"Match.group(int|string)")," is now validated (T-Regx was waiting a bit for this change!). We believe that using an\ninvalid group name is a sign of a bug, so using ",(0,i.kt)("inlineCode",{parentName:"p"},"group(-1)")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"group('!@#')")," now throws ",(0,i.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/class.invalidargumentexception.php"},(0,i.kt)("inlineCode",{parentName:"a"},"\\InvalidArgumentException")),",\nas it's more suitable than assuming that ",(0,i.kt)("inlineCode",{parentName:"p"},"-1")," is just an unmatched group."))}u.isMDXComponent=!0}}]);
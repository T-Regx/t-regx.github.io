"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7896],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),d=r,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||l;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1755:(e,t,a)=>{a.d(t,{O2:()=>f,x4:()=>k});var n=a(7294),r=a(944),l=a(6010);const i="tabItem_vU9c",o="tabItemActive_cw6a";var s=37,c=39;const p=function(e){var t=e.lazy,a=e.block,p=e.defaultValue,m=e.values,u=e.groupId,d=e.className,h=(0,r.Z)(),f=h.tabGroupChoices,y=h.setTabGroupChoices,v=(0,n.useState)(p),k=v[0],g=v[1],b=n.Children.toArray(e.children),w=[];if(null!=u){var x=f[u];null!=x&&x!==k&&m.some((function(e){return e.value===x}))&&g(x)}var N=function(e){var t=e.currentTarget,a=w.indexOf(t),n=m[a].value;g(n),null!=u&&(y(u,n),setTimeout((function(){var e,a,n,r,l,i,s,c;(e=t.getBoundingClientRect(),a=e.top,n=e.left,r=e.bottom,l=e.right,i=window,s=i.innerHeight,c=i.innerWidth,a>=0&&l<=c&&r<=s&&n>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(o),setTimeout((function(){return t.classList.remove(o)}),2e3))}),150))},$=function(e){var t,a;switch(e.keyCode){case c:var n=w.indexOf(e.target)+1;a=w[n]||w[0];break;case s:var r=w.indexOf(e.target)-1;a=w[r]||w[w.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},d)},m.map((function(e){var t=e.value,a=e.label;return n.createElement("li",{role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,className:(0,l.Z)("tabs__item",i,{"tabs__item--active":k===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:$,onFocus:N,onClick:N},a)}))),t?(0,n.cloneElement)(b.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==k})}))))};const m=function(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)};var u=a(5558);const d="code_JkvM",h=function(e){var t=e.children,a=e.language;return n.createElement("div",{className:d},n.createElement(u.Z,{className:"language-"+(a||"php")},function(e){if("string"==typeof e)return e;if(!Array.isArray(e))throw console.log(this.props.children),"Unexpected child of <Code>";if(e.every((function(e){return"string"==typeof e})))return e.join("")}(t)))};const f=function(e){var t=e.tregx,a=e.php;return n.createElement(p,{defaultValue:"t-regx",values:y(t,a)},t&&n.createElement(m,{value:"t-regx"},n.createElement(h,null,t)),a&&n.createElement(m,{value:"php"},n.createElement(h,null,a)))};function y(e,t){return[e?{label:"T-Regx",value:"t-regx"}:{},t?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}))}const v="result_6Tn1",k=function(e){var t=e.text,a=e.children;return n.createElement("div",{className:v},n.createElement(h,{language:t?"text":"php"},a))}},8163:(e,t,a)=>{a.r(t),a.d(t,{default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=a(1755),o=["components"],s={id:"match-flat-map",title:"Map with keys (Flat map)"},c={unversionedId:"match-flat-map",id:"match-flat-map",isDocsHomePage:!1,title:"Map with keys (Flat map)",description:"There are cases when you would like to create a single list of all your matches. flatMap() is great for it.",source:"@site/../docs/match-flat-map.mdx",sourceDirName:".",slug:"/match-flat-map",permalink:"/docs/match-flat-map",version:"current",lastUpdatedAt:1663873231,formattedLastUpdatedAt:"9/22/2022",frontMatter:{id:"match-flat-map",title:"Map with keys (Flat map)"},sidebar:"docs",previous:{title:"Map occurrences",permalink:"/docs/match-map"},next:{title:"Match details",permalink:"/docs/match-details"}},p=[{value:"Making a flat map",id:"making-a-flat-map",children:[]},{value:"Return types",id:"return-types",children:[]},{value:"Variable callbacks",id:"variable-callbacks",children:[]},{value:"Mapping with keys",id:"mapping-with-keys",children:[]},{value:"Duplicate keys",id:"duplicate-keys",children:[]}],m={toc:p};function u(e){var t=e.components,a=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"There are cases when you would like to create a single list of all your matches. ",(0,l.kt)("inlineCode",{parentName:"p"},"flatMap()")," is great for it.\nIn other words, it allows you to return one, zero or more elements from your mapping function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"->map(function () {\n    return $value;        // Exactly one element\n}\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"->flatMap(function () {\n    return [...$values];  // Can be 1, many or even zero elements\n}\n")),(0,l.kt)("h2",{id:"making-a-flat-map"},"Making a flat map"),(0,l.kt)("p",null,"Method ",(0,l.kt)("inlineCode",{parentName:"p"},"flatMap()")," is basically method ",(0,l.kt)("a",{parentName:"p",href:"/docs/match-map"},(0,l.kt)("inlineCode",{parentName:"a"},"map()")),", from which you can return multiple values."),(0,l.kt)(i.O2,{tregx:"pattern('\\w+')->match('I have 19 trains')->flatMap(function (Detail $detail) {\n    return [\n        $detail->text(), strLen($detail)\n    ];\n});",php:"preg::match_all(\"/\\w+/\", 'I have 19 trains', $matches);\nreturn array_merge(...array_map(function (string $text) {\n    return [\n        $text, strLen($text)\n    ];\n}, $matches[0]));",mdxType:"CodeTabs"}),(0,l.kt)(i.x4,{mdxType:"Result"},"['I', 1, 'have', 4, '19', 2, 'trains', 6]"),(0,l.kt)("h2",{id:"return-types"},"Return types"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"flatMap()")," only accepts an ",(0,l.kt)("inlineCode",{parentName:"p"},"array"),' as its return type. Returning a single element and implicitly creating a one-element\narray under the hood would break our "Explicity rule".'),(0,l.kt)(i.O2,{tregx:"pattern('\\w+')->match(\"I like trains\")->flatMap(function (Detail $detail) {\n    return $detail;  // <- throws InvalidReturnValueException\n});",php:"preg::match_all(\"/\\w+/\", 'I like trains', $matches);\nreturn array_merge(...array_map(function (string $text) {\n    throw new InvalidReturnValueException(); // <- throws InvalidReturnValueException\n}, $matches[0]));",mdxType:"CodeTabs"}),(0,l.kt)("p",null,"So always remember to return an array."),(0,l.kt)(i.O2,{tregx:"pattern('\\w+')->match(\"I like trains\")->flatMap(function (Detail $detail) {\n    return [$detail->text()];  // ok\n});",php:"preg::match_all(\"/\\w+/\", 'I like trains', $matches);\nreturn array_merge(...array_map(function (string $text) {\n    return [$text];   // ok\n}, $matches[0]));",mdxType:"CodeTabs"}),(0,l.kt)("h2",{id:"variable-callbacks"},"Variable callbacks"),(0,l.kt)("p",null,"You can invoke ",(0,l.kt)("inlineCode",{parentName:"p"},"flatMap()")," with any valid PHP ",(0,l.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/language.types.callable.php"},(0,l.kt)("inlineCode",{parentName:"a"},"callable")),", which accepts one or zero string parameters and returns ",(0,l.kt)("inlineCode",{parentName:"p"},"array"),"."),(0,l.kt)(i.O2,{tregx:"pattern(\"[\\w']+\")->match(\"I'm 19 years old\")->flatMap('str_split');",php:"preg::match_all(\"/[\\w']+/\", \"I'm 19 years old\", $matches);\nreturn array_merge(...array_map('str_split', $matches[0]));",mdxType:"CodeTabs"}),(0,l.kt)(i.x4,{mdxType:"Result"},"['I', '\\'', 'm', '1', '9', 'y', 'e', 'a', 'r', 's', 'o', 'l', 'd']"),(0,l.kt)("p",null,"The ",(0,l.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/language.types.callable.php"},(0,l.kt)("inlineCode",{parentName:"a"},"callable"))," passed to ",(0,l.kt)("inlineCode",{parentName:"p"},"flatMap()")," must return an array. ",(0,l.kt)("inlineCode",{parentName:"p"},"InvalidReturnValueException")," is thrown, otherwise."),(0,l.kt)("h2",{id:"mapping-with-keys"},"Mapping with keys"),(0,l.kt)("p",null,"Because ",(0,l.kt)("inlineCode",{parentName:"p"},"flatMapAssoc()")," receives an array from its callback, it's possible to also return an associative array with\nspecified keys:"),(0,l.kt)(i.O2,{tregx:'pattern("\\w+")->match("Apples are cool")->flatMapAssoc(function (Detail $detail) {\n    return [$detail->text() => $detail->offset()];   // offset is UTF-8 safe\n});',php:'preg::match_all("/\\w+/", "Apples are cool", $matches, PREG_OFFSET_CAPTURE);\nreturn array_merge(...array_map(function (array $match) {\n    return [$match[0] => $match[1]];    // offset is given in bytes\n}, $matches[0]));',mdxType:"CodeTabs"}),(0,l.kt)(i.x4,{mdxType:"Result"},"[\n    'Apples' => 0,\n    'are'    => 7,\n    'cool'   => 11\n]"),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},"Keep in mind, that ",(0,l.kt)("inlineCode",{parentName:"p"},"flatMap()")," uses ",(0,l.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.array-merge.php"},(0,l.kt)("inlineCode",{parentName:"a"},"array_merge()"))," to flatten the results! So any keys returned will be\nreindexed."))),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("p",{parentName:"div"},(0,l.kt)("inlineCode",{parentName:"p"},"Detail.offset()")," returns offset as a ",(0,l.kt)("a",{parentName:"p",href:"/docs/match-details#offsets"},"valid UTF-8 sequence"),", whereas ",(0,l.kt)("inlineCode",{parentName:"p"},"preg::match_all()"),"\ncounts them as ",(0,l.kt)("a",{parentName:"p",href:"/docs/match-details#offsets"},"bytes"),". To return bytes number with T-Regx as well,\nuse ",(0,l.kt)("a",{parentName:"p",href:"/docs/match-details#offsets"},(0,l.kt)("inlineCode",{parentName:"a"},"byteOffset()")),"."))),(0,l.kt)("h2",{id:"duplicate-keys"},"Duplicate keys"),(0,l.kt)("p",null,"Duplicate keys are not allowed in PHP arrays, so they'll only appear once in the results."),(0,l.kt)(i.O2,{tregx:'pattern("\\w+")->match("Apples are cool")->flatMapAssoc(function (Detail $detail) {\n    return [\n        $detail->text() => $detail->offset(),   // offset is UTF-8 safe\n        \'subject\'       => $detail->subject()\n    ];\n});',php:"$subject = 'Apples are cool';\npreg::match_all(\"/\\w+/\", $subject, $matches, PREG_OFFSET_CAPTURE);\nreturn array_merge(...array_map(function (array $match) use ($subject) {\n    return [\n        $match[0] => $match[1],   // offset is given in bytes\n        'subject' => $subject\n    ];\n}, $matches[0]));",mdxType:"CodeTabs"}),(0,l.kt)(i.x4,{mdxType:"Result"},"[\n    'Apples'  => 0,\n    'subject' => \"Apples are cool\",\n    'are'     => 7,\n    'cool'    => 11\n]"))}u.isMDXComponent=!0}}]);
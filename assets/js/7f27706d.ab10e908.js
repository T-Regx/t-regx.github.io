"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1723],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=c(n),u=a,h=s["".concat(p,".").concat(u)]||s[u]||f[u]||i;return n?r.createElement(h,l(l({ref:t},m),{},{components:n})):r.createElement(h,l({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},36:(e,t,n)=>{n.r(t),n.d(t,{default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={title:"Valentine's release",author:"Daniel Wilkowski"},p={permalink:"/blog/2021/02/14/release-0.10.1",source:"@site/blog/2021-02-14-release-0.10.1.md",title:"Valentine's release",description:"Rawwrrrr!",date:"2021-02-14T00:00:00.000Z",formattedDate:"February 14, 2021",tags:[],readingTime:.885,truncated:!1,prevItem:{title:"Implicit all() in replace()",permalink:"/blog/2021/03/06/release-0.10.2"},nextItem:{title:"T-Regx on PHP8",permalink:"/blog/2021/01/30/release-0.10.0"}},c=[],m={toc:c},s="wrapper";function f(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)(s,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Rawwrrrr!"),(0,i.kt)("p",null,"We've release T-Regx ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/T-Regx/T-Regx/releases/tag/v0.10.1"},"0.10.1"),"."),(0,i.kt)("p",null,"This time, we've updated match filtering. Previously, methods ",(0,i.kt)("inlineCode",{parentName:"p"},"filter()")," used on regular match pattern,\nit would filter only ",(0,i.kt)("a",{parentName:"p",href:"/docs/match"},(0,i.kt)("inlineCode",{parentName:"a"},"Detail")),", and have exactly alike interface as the said match pattern\n(like a filtering decorator), yet ",(0,i.kt)("inlineCode",{parentName:"p"},"fluent()->filter()")," simply removed entries from the fluent stream.\nWe don't like that difference."),(0,i.kt)("p",null,"So we renamed ",(0,i.kt)("inlineCode",{parentName:"p"},"match()->filter()")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"match()->remaining()"),", since that looks more like a decorator it is,\nand we added new ",(0,i.kt)("inlineCode",{parentName:"p"},"match()->filter()")," method which works like ",(0,i.kt)("inlineCode",{parentName:"p"},"all()"),", but it only returns the items\nmatching the predicate (like ",(0,i.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.array-filter.php"},(0,i.kt)("inlineCode",{parentName:"a"},"array_filter")),")."),(0,i.kt)("p",null,"Apart from that, we fixed a bug that was lurking in ",(0,i.kt)("inlineCode",{parentName:"p"},"fluent()->flatMap()")," (don't worry, it's gone now :), as\nwell as improving the ",(0,i.kt)("inlineCode",{parentName:"p"},"fluent()->first()"),". Now, when filtering a fluent stream, calling ",(0,i.kt)("inlineCode",{parentName:"p"},"first()")," first calls\n",(0,i.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.preg-match.php"},(0,i.kt)("inlineCode",{parentName:"a"},"preg_match()")),", and if it matches the predicate, that ",(0,i.kt)("a",{parentName:"p",href:"/docs/match"},(0,i.kt)("inlineCode",{parentName:"a"},"Detail"))," is simply returned. If the first ",(0,i.kt)("a",{parentName:"p",href:"/docs/match"},(0,i.kt)("inlineCode",{parentName:"a"},"Detail")),"\nisn't matched by the predicate, then it calls ",(0,i.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.preg-match-all.php"},(0,i.kt)("inlineCode",{parentName:"a"},"preg_match_all()"))," and returns the first detail\nfrom that, that matches the predicate."),(0,i.kt)("p",null,"As always, everything is described in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/T-Regx/T-Regx/blob/develop/ChangeLog.md"},"ChangeLog.md")," on github."))}f.isMDXComponent=!0}}]);
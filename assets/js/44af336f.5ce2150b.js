"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[120],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),s=u(n),d=a,h=s["".concat(p,".").concat(d)]||s[d]||m[d]||o;return n?r.createElement(h,c(c({ref:t},l),{},{components:n})):r.createElement(h,c({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:a,c[1]=i;for(var u=2;u<o;u++)c[u]=n[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3169:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),c=["components"],i={id:"count",title:"Counting occurrences"},p={unversionedId:"count",id:"count",isDocsHomePage:!1,title:"Counting occurrences",description:"Documentation for version: 0.41.2",source:"@site/../docs/count.mdx",sourceDirName:".",slug:"/count",permalink:"/docs/count",version:"current",lastUpdatedAt:1677178025,formattedLastUpdatedAt:"2/23/2023",frontMatter:{id:"count",title:"Counting occurrences"},sidebar:"docs",previous:{title:"Map with keys (Flat map)",permalink:"/docs/match-flat-map"},next:{title:"Match details",permalink:"/docs/match-details"}},u=[{value:"Unmatched subjects",id:"unmatched-subjects",children:[]},{value:"Malformed patterns",id:"malformed-patterns",children:[]},{value:"Number of occurrences in <code>Matcher</code>",id:"number-of-occurrences-in-matcher",children:[]},{value:"Performance predicating a subject",id:"performance-predicating-a-subject",children:[]}],l={toc:u},s="wrapper";function m(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)(s,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Documentation for version: 0.41.2"),(0,o.kt)("p",null,"In certain situations an amount of occurrences is desired, but not the occurrences themselves.\nIn that case, it's recommended to consider ",(0,o.kt)("inlineCode",{parentName:"p"},"Pattern.count()"),", instead of performing full matches\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"Matcher.all()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"Search.all()"),"."),(0,o.kt)("p",null,"Method ",(0,o.kt)("inlineCode",{parentName:"p"},"Pattern.count()")," accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"string")," subject, and returns the number of occurrences of\nthe pattern in the subject."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"/*\n * Instantiate pattern\n */\n$pattern = pattern('[aeiouy]');\n\n/*\n * Count occurrences \n */\n$pattern->count('Computer');  // (int) 3\n")),(0,o.kt)("h2",{id:"unmatched-subjects"},"Unmatched subjects"),(0,o.kt)("p",null,"When ",(0,o.kt)("inlineCode",{parentName:"p"},"Pattern.count()")," is called with a subject that doesn't match the pattern,\nthen ",(0,o.kt)("inlineCode",{parentName:"p"},"count()")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = Pattern::of('[0-9]');\n$pattern->count('Computer');  // (int) 0\n")),(0,o.kt)("h2",{id:"malformed-patterns"},"Malformed patterns"),(0,o.kt)("p",null,"Every use of ",(0,o.kt)("inlineCode",{parentName:"p"},"pattern()"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"Pattern::of()")," with an invalid pattern causes ",(0,o.kt)("inlineCode",{parentName:"p"},"MalformedPatternException"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"try {\n  pattern('[aeiouy')->count('Computer');  // malformed pattern\n}\ncatch (MalformedPatternException $ex) {\n  echo $ex->getMessage();  // 'Missing terminating ] for character class at offset 7'\n}\n")),(0,o.kt)("h2",{id:"number-of-occurrences-in-matcher"},"Number of occurrences in ",(0,o.kt)("inlineCode",{parentName:"h2"},"Matcher")),(0,o.kt)("p",null,"Apart from ",(0,o.kt)("inlineCode",{parentName:"p"},"Pattern.count()"),", methods ",(0,o.kt)("inlineCode",{parentName:"p"},"Matcher.count()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Search.count()")," can also be used to\nretrieve the number of occurrences of the pattern in the subject."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"/*\n * Instantiate pattern\n */\n$pattern = pattern('[aeiouy]');\n\n/*\n * Instantiate the subject matcher\n */\n$matcher = $pattern->match('Computer');\n\n/*\n * Count occurrences \n */\n$matcher->count();  // (int) 3\n")),(0,o.kt)("p",null,"Additionally, ",(0,o.kt)("inlineCode",{parentName:"p"},"Matcher")," implements PHP interface ",(0,o.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/class.countable.php"},(0,o.kt)("inlineCode",{parentName:"a"},"\\Countable")),", and so can be used with PHP methods,\nsuch as ",(0,o.kt)("inlineCode",{parentName:"p"},"count()"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = pattern('[aeiouy]');\n$matcher = $pattern->match('Computer');\n\ncount($matcher);  // (int) 3\n")),(0,o.kt)("h2",{id:"performance-predicating-a-subject"},"Performance predicating a subject"),(0,o.kt)("p",null,"It might appear suitable to use ",(0,o.kt)("inlineCode",{parentName:"p"},"count()")," to ascertain whether a given subject matches the\npattern, since ",(0,o.kt)("inlineCode",{parentName:"p"},"count()")," doesn't return any matches."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = Pattern::of('[aeiouy]');\n$count = $pattern->count('Computer');\nreturn $count > 0;  // (bool) true\n")),(0,o.kt)("p",null,"While that is true, that using ",(0,o.kt)("inlineCode",{parentName:"p"},"Pattern.count()")," is more performant than ",(0,o.kt)("inlineCode",{parentName:"p"},"Matcher.all()"),",\nit still iterates all of the occurrences of the pattern in the subject. "),(0,o.kt)("p",null,"The recommended approach for such predication is with ",(0,o.kt)("a",{parentName:"p",href:"/docs/match#predication-overview"},(0,o.kt)("inlineCode",{parentName:"a"},"test()")),"/",(0,o.kt)("a",{parentName:"p",href:"/docs/match#predication-overview"},(0,o.kt)("inlineCode",{parentName:"a"},"fails()")),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = Pattern::of('[aeiouy]');\nreturn $pattern->test('Computer');  // (bool) true\n")),(0,o.kt)("p",null,"That's because ",(0,o.kt)("inlineCode",{parentName:"p"},"count()")," goes through each occurrence of a pattern in the subject counting it,\nwhereas ",(0,o.kt)("inlineCode",{parentName:"p"},"test()")," returns right after matching the first occurrence."))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7257],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var p=n.createContext({}),d=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=d(a),u=l,f=m["".concat(p,".").concat(u)]||m[u]||s[u]||r;return a?n.createElement(f,i(i({ref:t},c),{},{components:a})):n.createElement(f,i({ref:t},c))}));function u(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,i=new Array(r);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var d=2;d<r;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3541:(e,t,a)=>{a.r(t),a.d(t,{default:()=>s,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var n=a(7462),l=a(3366),r=(a(7294),a(3905)),i=["components"],o={id:"replace-match-details",title:"Advanced replace details"},p={unversionedId:"replace-match-details",id:"replace-match-details",isDocsHomePage:!1,title:"Advanced replace details",description:"Introduction",source:"@site/../docs/replace-match-details.md",sourceDirName:".",slug:"/replace-match-details",permalink:"/docs/replace-match-details",version:"current",lastUpdatedAt:1663931802,formattedLastUpdatedAt:"9/23/2022",frontMatter:{id:"replace-match-details",title:"Advanced replace details"},sidebar:"docs",previous:{title:"Capturing groups - J modifier",permalink:"/docs/match-groups-j-modifier"},next:{title:"Why PHP sucks?",permalink:"/docs/why-php-sucks"}},d=[{value:"Introduction",id:"introduction",children:[]},{value:"Examples",id:"examples",children:[{value:"<code>modifiedSubject()</code> example",id:"modifiedsubject-example",children:[]},{value:"<code>modifiedOffset()</code> example",id:"modifiedoffset-example",children:[]},{value:"Capturing groups",id:"capturing-groups",children:[]}]},{value:"Performance",id:"performance",children:[]},{value:"Bytes vs. characters",id:"bytes-vs-characters",children:[]}],c={toc:d};function s(e){var t=e.components,a=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern()->match()")," all ",(0,r.kt)("a",{parentName:"p",href:"/docs/match-for-each"},"callbacks")," receive one parameter when\ncalled - ",(0,r.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,r.kt)("inlineCode",{parentName:"a"},"Detail")),". You can learn more about it on ",(0,r.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,r.kt)("inlineCode",{parentName:"a"},"Detail"))," page."),(0,r.kt)("p",null,"However, when using ",(0,r.kt)("inlineCode",{parentName:"p"},"pattern()->replace()")," the callback receives ",(0,r.kt)("inlineCode",{parentName:"p"},"ReplaceMatch")," details object.\nIt extends ",(0,r.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,r.kt)("inlineCode",{parentName:"a"},"Detail"))," object, so they have exactly alike interfaces."),(0,r.kt)("p",null,"Additionally, ",(0,r.kt)("inlineCode",{parentName:"p"},"ReplaceMatch")," has two separate methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ReplaceMatch.modifiedSubject(): string")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ReplaceMatch.modifiedOffset(): int"))),(0,r.kt)("p",null,"They work similarly to ",(0,r.kt)("a",{parentName:"p",href:"/docs/match-offsets"},(0,r.kt)("inlineCode",{parentName:"a"},"offset()"))," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/match-details#subject"},(0,r.kt)("inlineCode",{parentName:"a"},"subject()"))," methods,\nbut they take into account ",(0,r.kt)("strong",{parentName:"p"},"results of previous callbacks"),". Basically, you can see into\nthe process of the new string being built."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modifiedSubject()")," - current state of a subject being built."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modifiedOffset()")," - occurrence's offset, but according to a current the ",(0,r.kt)("inlineCode",{parentName:"li"},"modifiedSubject()"))),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"modifiedsubject-example"},(0,r.kt)("inlineCode",{parentName:"h3"},"modifiedSubject()")," example"),(0,r.kt)("p",null,"Given a pattern, that matches capitalized words:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$subject = 'Me, Rihanna and my Mom really like Sweden';\n\n$result = pattern(\"[A-Z][a-z]+\")->replace($subject)->all()->callback(function ($detail) {\n    // highlight-next-line\n    $detail->subject(); // Me, Rihanna and my Mom really like Sweden\n\n    return '____';\n});\n")),(0,r.kt)("p",null,"having iterated the subject looking for ",(0,r.kt)("inlineCode",{parentName:"p"},"[A-Z][a-z]+")," - for each ",(0,r.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,r.kt)("inlineCode",{parentName:"a"},"Detail"))," the result of ",(0,r.kt)("inlineCode",{parentName:"p"},"Detail.subject()"),"\nmethod would always be the same. There are 4 occurrences matched by the pattern, so callback is invoked 4 times,\nand each time ",(0,r.kt)("inlineCode",{parentName:"p"},"$detail->subject()")," is equal to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Me, Rihanna and my Mom really like Sweden\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"However, results of ",(0,r.kt)("inlineCode",{parentName:"p"},"ReplaceMatch.modifiedSubject()")," would also contain results of ",(0,r.kt)("strong",{parentName:"p"},"previous replacements"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Me, Rihanna and my Mom really like Sweden\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"____, Rihanna and my Mom really like Sweden\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"____, ____ and my Mom really like Sweden\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"____, ____ and my ____ really like Sweden\n")),(0,r.kt)("p",null,"And the ",(0,r.kt)("inlineCode",{parentName:"p"},"$result")," would be equal to"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"____, ____ and my ____ really like ____\n")),(0,r.kt)("h3",{id:"modifiedoffset-example"},(0,r.kt)("inlineCode",{parentName:"h3"},"modifiedOffset()")," example"),(0,r.kt)("p",null,"Have you iterated the subject looking for ",(0,r.kt)("inlineCode",{parentName:"p"},"[A-Z][a-z]+"),", these would be the results of ",(0,r.kt)("inlineCode",{parentName:"p"},"Detail.offset()")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Me, Rihanna and my Mom really like Sweden\n\u2191\noffset() // 0\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Me, Rihanna and my Mom really like Sweden\n    \u2191\n    offset() // 4\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Me, Rihanna and my Mom really like Sweden\n                   \u2191\n                   offset() // 19\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Me, Rihanna and my Mom really like Sweden\n                                   \u2191\n                                   offset() // 35\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,"But, if instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"ReplaceMatch.offset()")," you use ",(0,r.kt)("inlineCode",{parentName:"p"},"ReplaceMatch.modifiedOffset()"),", these are the results:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Me, Rihanna and my Mom really like Sweden\n\u2191\nmodifiedOffset()  // 0\noffset()          // 0\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"____, Rihanna and my Mom really like Sweden\n      \u2191\n      modifiedOffset() // 6\n    \u2191\n    offset()           // 4\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"____, ____ and my Mom really like Sweden\n                  \u2191\n                  modifiedOffset()  // 18\n                   \u2191\n                   offset()         // 19\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"____, ____ and my ____ really like Sweden\n                                   \u2191\n                                   modifiedOffset()  // 35\n                                   offset()          // 35\n")),(0,r.kt)("h3",{id:"capturing-groups"},"Capturing groups"),(0,r.kt)("p",null,"Method ",(0,r.kt)("inlineCode",{parentName:"p"},"modifiedOffset()")," as well as ",(0,r.kt)("inlineCode",{parentName:"p"},"modifiedSubject()")," are available for groups (which when replacing are of type\n",(0,r.kt)("inlineCode",{parentName:"p"},"ReplaceDetailGroup extends DetailGroup"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$subject = 'Me, Rihanna and my Mom really like Sweden';\n\n$result = pattern(\"[A-Z]([a-z]+)\")->replace($subject)->all()->callback(function ($detail) {\n    // highlight-next-line\n    $group = $detail->group(1);\n\n    // highlight-next-line\n    $group->modifiedSubject();\n    // highlight-next-line\n    $group->modifiedOffset();\n\n    return '____';\n});\n")),(0,r.kt)("p",null,"When used on group, the ",(0,r.kt)("inlineCode",{parentName:"p"},"modifiedOffset()")," returns the offset at which the captured group is present in the\nmodified subject, not the offset at which the whole match was captured."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"modifiedSubject()")," for groups returns exactly the same value as ",(0,r.kt)("inlineCode",{parentName:"p"},"modifiedSubject()")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"ReplaceDetail"),"."),(0,r.kt)("h2",{id:"performance"},"Performance"),(0,r.kt)("p",null,"But be sure, each and every of those examples only uses one call to ",(0,r.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.preg-replace-callback.php"},(0,r.kt)("inlineCode",{parentName:"a"},"preg_replace_callback()")),". T-Regx\nsimply remembers the length of the replacement returned from ",(0,r.kt)("inlineCode",{parentName:"p"},"callback()"),", and adds it to ",(0,r.kt)("inlineCode",{parentName:"p"},"modifiedOffset()"),",\nwhen called."),(0,r.kt)("h2",{id:"bytes-vs-characters"},"Bytes vs. characters"),(0,r.kt)("p",null,"When used on ",(0,r.kt)("inlineCode",{parentName:"p"},"ReplaceDetail")," (whole match) or ",(0,r.kt)("inlineCode",{parentName:"p"},"ReplaceDetailGroup")," (capturing group), method ",(0,r.kt)("inlineCode",{parentName:"p"},"modifiedOffset()"),"\nreturns ",(0,r.kt)("strong",{parentName:"p"},"character")," position."),(0,r.kt)("p",null,"To read ",(0,r.kt)("strong",{parentName:"p"},"byte")," position, use ",(0,r.kt)("inlineCode",{parentName:"p"},"byteModifiedOffset()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$subject = 'F\xf3\xf3, L\u0119\u0119, \u015a\u0107\u0107';\n\n$result = pattern(\"(\\w+)\", 'u')->replace($subject)->all()->callback(function (ReplaceDetail $detail) {\n    // highlight-next-line\n    $matchOffset = $detail->byteModifiedOffset();\n    // highlight-next-line\n    $groupOffset = $detail->group(1)->byteModifiedOffset();\n\n    return '\u0119';\n});\n")),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"modifiedOffset()")," with multibyte-safe methods like ",(0,r.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.mb-substr.php"},(0,r.kt)("inlineCode",{parentName:"a"},"mb_substr()")),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"byteModifiedOffset()")," with methods\nlike ",(0,r.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/function.substr.php"},(0,r.kt)("inlineCode",{parentName:"a"},"substr()")),"."))))}s.isMDXComponent=!0}}]);
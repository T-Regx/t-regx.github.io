"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3391],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),u=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),c=u(r),m=a,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||o;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8583:(e,t,r)=>{r.r(t),r.d(t,{default:()=>c,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),l=["components"],i={title:"Release 0.9.5 - Alternation in prepared patterns!",author:"Daniel Wilkowski",authorFBID:0x5af34da0d14b},p={permalink:"/blog/2020/03/15/release-0.9.5",source:"@site/blog/2020-03-15-release-0.9.5.md",title:"Release 0.9.5 - Alternation in prepared patterns!",description:"This release brings alternation in prepared patterns!",date:"2020-03-15T00:00:00.000Z",formattedDate:"March 15, 2020",tags:[],readingTime:.955,truncated:!1,prevItem:{title:"Toss a coin to your T-Regx!",permalink:"/blog/2020/03/19/sponsor-t-regx"},nextItem:{title:"Release 0.9.4 - Exception changes and groupBy()",permalink:"/blog/2020/02/28/release-0.9.4"}},u=[],s={toc:u};function c(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This release brings alternation in prepared patterns!"),(0,o.kt)("p",null,"Up to this point, there was no reasonable way to create a pattern from a variable number of inputs, for example\nyou allow your users to input 0, 1 or more tags, which later should be used in a pattern. In procedural world, probably\n",(0,o.kt)("inlineCode",{parentName:"p"},"array_map()")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"preg::quote()")," would do the job, but wait! You don't have to code, it's already here:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"Pattern::bind('^user:@id/findBy:@tags/all$', [\n  'id'   => $user->id,\n  'tags' => $_GET['tags']\n]);\n")),(0,o.kt)("p",null,"In other words:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"Pattern::bind('My tag is: \"@tags\"', ['tags' => ['one', 'two', 'three']]);\n")),(0,o.kt)("p",null,"creates a pattern:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'/My tag is: "(one|two|three)"/\n')),(0,o.kt)("p",null,"Rest assured:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the values are quoted with ",(0,o.kt)("inlineCode",{parentName:"li"},"preg::quote()"),", to protect you from malicious code"),(0,o.kt)("li",{parentName:"ul"},"the group is non-capturing (use ",(0,o.kt)("inlineCode",{parentName:"li"},"'My tag is: \"(@tags)\"'")," for a capturing group, to be used with ",(0,o.kt)("inlineCode",{parentName:"li"},"group()"),")")),(0,o.kt)("p",null,"The alternation is really smart too - if you use ",(0,o.kt)("inlineCode",{parentName:"p"},"i")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"u")," flag, T-Regx will perform certain optimization,\nfor example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"Pattern::inject('Find: @ :)', [['foo', 'bar', 'FOO']], 'i');\n")),(0,o.kt)("p",null,"then it wil collapse ",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"FOO"),", since ",(0,o.kt)("inlineCode",{parentName:"p"},"i")," flag is used:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"/Find: (foo|bar) :)/\n")),(0,o.kt)("p",null,"That's it in this release! Stay tuned :)"))}c.isMDXComponent=!0}}]);
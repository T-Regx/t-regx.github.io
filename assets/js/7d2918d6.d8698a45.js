"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1776],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,h=d["".concat(l,".").concat(c)]||d[c]||u[c]||i;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3323:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u,frontMatter:()=>p,metadata:()=>l,toc:()=>s});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],p={id:"match-groups-j-modifier",title:"Capturing groups - J modifier"},l={unversionedId:"match-groups-j-modifier",id:"match-groups-j-modifier",isDocsHomePage:!1,title:"Capturing groups - J modifier",description:"Overview",source:"@site/../docs/match-groups-j-modifier.md",sourceDirName:".",slug:"/match-groups-j-modifier",permalink:"/docs/match-groups-j-modifier",version:"current",lastUpdatedAt:1663873231,formattedLastUpdatedAt:"9/22/2022",frontMatter:{id:"match-groups-j-modifier",title:"Capturing groups - J modifier"},sidebar:"docs",previous:{title:"Capturing groups - in depth",permalink:"/docs/match-groups-in-depth"},next:{title:"Advanced replace details",permalink:"/docs/replace-match-details"}},s=[{value:"Overview",id:"overview",children:[]},{value:"The complication",id:"the-complication",children:[]},{value:"The PHP solution",id:"the-php-solution",children:[]},{value:"T-Regx solution",id:"t-regx-solution",children:[]}],m={toc:s};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"overview"},"Overview"),(0,i.kt)("p",null,"PCRE in PHP offers ",(0,i.kt)("inlineCode",{parentName:"p"},"J")," modifier. It can be used either as a flag: ",(0,i.kt)("inlineCode",{parentName:"p"},"/foo/J")," (since PHP 7.2),\nor as an in-pattern modifier: ",(0,i.kt)("inlineCode",{parentName:"p"},"/foo(?J)/"),"."),(0,i.kt)("p",null,"Normally, duplicated pattern names aren't allowed, and such code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pattern('(?<group>)(?<group>)')  // MalformedPatternException\n")),(0,i.kt)("p",null,"would throw ",(0,i.kt)("inlineCode",{parentName:"p"},"MalformedPatternException"),", with message ",(0,i.kt)("inlineCode",{parentName:"p"},"Two named subpatterns have the same name"),"."),(0,i.kt)("p",null,"However, ",(0,i.kt)("inlineCode",{parentName:"p"},"J")," modifier removes that restriction, and it becomes possible to use duplicated group names\nin one pattern:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pattern('(?<group>)(?<group>)', 'J')  // works fine\n")),(0,i.kt)("p",null,"It doesn't make much sense for two completely separate groups; it rather may have ",(0,i.kt)("em",{parentName:"p"},"some")," sense to be\nused with optional, mutually exclusive groups, like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pattern('((?<scheme>http)|(?<scheme>ftp))', 'J')  // either one or the other\n")),(0,i.kt)("p",null,"maybe. T-Regx doesn't encourage such patterns, we'd recommend using one enclosing group for that purpose."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"pattern('(?<scheme>http|ftp)', 'J')\n")),(0,i.kt)("h3",{id:"the-complication"},"The complication"),(0,i.kt)("p",null,"PCRE PHP API returns groups as an ",(0,i.kt)("inlineCode",{parentName:"p"},"array"),", and PHP arrays can't have duplicate keys. That means, despite\nmultiple groups with the same name being matched, only one will be present in the resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"array"),".\nThere are some constants, allowing us to handle the duplicate groups in ",(0,i.kt)("em",{parentName:"p"},"some")," way, but it's not perfect."),(0,i.kt)("p",null,"That means, T-Regx ",(0,i.kt)("strong",{parentName:"p"},"isn't able")," to reliably:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"assign an index to a named group"),(0,i.kt)("li",{parentName:"ul"},"assign a name to an indexed group"),(0,i.kt)("li",{parentName:"ul"},"determine which of groups are matched or not.")),(0,i.kt)("h3",{id:"the-php-solution"},"The PHP solution"),(0,i.kt)("p",null,"The solution is far from perfect, but it's PHP, so what can we do :)"),(0,i.kt)("p",null,"DN - doubly-named"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can't reliably assign a duplicated name to an index, and an index to a name:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group('group')->index()")," returns the index of the ",(0,i.kt)("strong",{parentName:"li"},"left-most")," DN group."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group(2)->name()")," returns the name, only if ",(0,i.kt)("inlineCode",{parentName:"li"},"2")," is the index of the ",(0,i.kt)("strong",{parentName:"li"},"left-most")," DN group.")),(0,i.kt)("p",{parentName:"li"},"So with PHP we assume the ",(0,i.kt)("strong",{parentName:"p"},"left-most")," indexed group has the name.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We can't reliably handle optional DN groups."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"So, the whole DN is considered unmatched if, and only if the ",(0,i.kt)("strong",{parentName:"li"},"right-most")," DN group is not matched."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"text()")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"offset()")," od the whole DN value, is the text and offset of the ",(0,i.kt)("strong",{parentName:"li"},"right-most")," DN group.")))),(0,i.kt)("p",null,"Basically:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Index/name relation, is taken from the ",(0,i.kt)("strong",{parentName:"p"},"left-most group")),(0,i.kt)("p",{parentName:"li"},"And in consequence: ",(0,i.kt)("inlineCode",{parentName:"p"},"groupNames()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"namedGroups()"),", etc.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Text/offset/matched is taken from the ",(0,i.kt)("strong",{parentName:"p"},"right-most group"),"."),(0,i.kt)("p",{parentName:"li"},"And in consequence: ",(0,i.kt)("inlineCode",{parentName:"p"},"byteOffset()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"orReturn()"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"orElse()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"tail()"),", etc."))),(0,i.kt)("p",null,"So basically what a group is, what is its name, order and index is determined by the matched subject. Great :|"),(0,i.kt)("h3",{id:"t-regx-solution"},"T-Regx solution"),(0,i.kt)("p",null,"The solution we came up with offers predictability and reliability."),(0,i.kt)("p",null,"Previously, ",(0,i.kt)("inlineCode",{parentName:"p"},"group('name')")," would just read a group by name from the ",(0,i.kt)("inlineCode",{parentName:"p"},"$match")," returned by PHP. We can't do it\nanymore, since if ",(0,i.kt)("inlineCode",{parentName:"p"},"J")," modifier was used, the index and the order of the group would vary based on the\nmatched occurrence (another gotcha)."),(0,i.kt)("p",null,"So first, T-Regx assigns ",(0,i.kt)("inlineCode",{parentName:"p"},"'name'")," to an index, and then reads the group. It gives us the advantage of the named\ngroup ",(0,i.kt)("strong",{parentName:"p"},"always")," is in the same place (same order) and has exactly the same index. Unfortunately, to read that, we\nalways read the first group used in pattern (but at least its not so stupidly random, as with PHP)."),(0,i.kt)("p",null,"All methods that handle capturing groups (",(0,i.kt)("inlineCode",{parentName:"p"},"group()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"groups()"),", inline ",(0,i.kt)("inlineCode",{parentName:"p"},"group()"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"namedGroups()"),", etc.) always\nuse that strategy, and basically they ignore ",(0,i.kt)("inlineCode",{parentName:"p"},"J")," modifier, as if it was never used."),(0,i.kt)("p",null,"To take advantage of ",(0,i.kt)("inlineCode",{parentName:"p"},"J")," modifier, we added new method ",(0,i.kt)("inlineCode",{parentName:"p"},"Detail.usingDuplicateName().group('name')"),". Method\n",(0,i.kt)("inlineCode",{parentName:"p"},"usingDuplicateName().group('name')")," only takes a name as an argument (using it with indexes doesn't make any sense),"),(0,i.kt)("p",null,"It's almost identical to ",(0,i.kt)("inlineCode",{parentName:"p"},"Detail.group('name')")," except, it doesn't have ",(0,i.kt)("inlineCode",{parentName:"p"},"index()")," method. It can't have ",(0,i.kt)("inlineCode",{parentName:"p"},"index()")," method,\nsince with ",(0,i.kt)("inlineCode",{parentName:"p"},"J")," modifier it's impossible to reliably assign an index to a named group, since there are many groups that could\nhave this name. We could add method ",(0,i.kt)("inlineCode",{parentName:"p"},"indexes()"),", to get a list of indexes of the groups that share this name, but it's\nimpossible with PHP API."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use \\TRegx\\CleanRegex\\Match\\Details\\Detail;\n\npattern('(?<one>one)? (?<two>two)?', 'J')\n  ->match('one two')\n  ->first(function (Detail $detail) {\n      // These two are identical\n      $detail->group('name')->text(); // always 'one'\n      $detail->group(1)->text();      // always 'one'\n      \n      // These two rely on subject\n      $detail->usingDuplicateName()->group('name')->text(); // either 'one' or 'two'\n  });\n")))}u.isMDXComponent=!0}}]);
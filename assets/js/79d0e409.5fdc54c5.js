"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9486],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=c(n),m=r,h=s["".concat(p,".").concat(m)]||s[m]||u[m]||i;return n?a.createElement(h,l(l({ref:t},d),{},{components:n})):a.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5642:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],o={title:"Announcement - Prepared patterns simplification",author:"Daniel Wilkowski"},p={permalink:"/blog/2021/07/10/simplification-of-prepared-patterns",source:"@site/blog/2021-07-10-simplification-of-prepared-patterns.md",title:"Announcement - Prepared patterns simplification",description:"Rawwrrrr!",date:"2021-07-10T00:00:00.000Z",formattedDate:"July 10, 2021",tags:[],readingTime:2.235,truncated:!1,prevItem:{title:"Announcement - Prepared patterns revamp",permalink:"/blog/2021/07/10/revamp-announcement"},nextItem:{title:"Templates and builders",permalink:"/blog/2021/05/11/release-0.11.0"}},c=[{value:"Reconcile <code>Pattern::inject()</code> vs <code>Pattern::bind()</code>",id:"reconcile-patterninject-vs-patternbind",children:[]},{value:"Bad design of <code>Pattern::template()</code>",id:"bad-design-of-patterntemplate",children:[]}],d={toc:c},s="wrapper";function u(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)(s,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Rawwrrrr!"),(0,i.kt)("p",null,"Hello, dear regexp writers! Again! After the revamp of prepared patterns, there will\ncome a change in the interface of the prepared patterns method as well. Simply speaking,\nwe'll simplify them."),(0,i.kt)("h2",{id:"reconcile-patterninject-vs-patternbind"},"Reconcile ",(0,i.kt)("inlineCode",{parentName:"h2"},"Pattern::inject()")," vs ",(0,i.kt)("inlineCode",{parentName:"h2"},"Pattern::bind()")),(0,i.kt)("p",null,"When prepared patterns, first came to be, the initial idea behind ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern::bind()")," was\nthat we could name our placeholder, so that the regular expression could become more readable.\nWith named placeholders we could also reuse them. "),(0,i.kt)("p",null,"However, after a year of production use, it turns out that naming placeholders doesn't produce\nas much utility, as it does to compromise the robustness of the patterns. And reusing of the\npatterns proved to be even less frequent."),(0,i.kt)("p",null,"For example, instead of"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"Pattern::bind('http://@animal.site.com/@animal', ['animal' => $animal]);\n")),(0,i.kt)("p",null,"one could simply use"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"Pattern::inject('http://@.site.com/@', [$animal, $animal]);\n")),(0,i.kt)("p",null,'There have been debates as to which of those approaches is "cleaner", and the majority decided\nthat the ',(0,i.kt)("inlineCode",{parentName:"p"},"Pattern::inject()")," is cleaner, despite the duplication of placeholders, on the rationale\nthat, if the placeholder is used twice, so should the injected values."),(0,i.kt)("p",null,"All in all, we decided that ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern::bind()")," doesn't bring any more utility that ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern::inject()"),",\nand there's nothing you could do with ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern::bind()"),", that you couldn't with ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern::inject()"),",\nso we decided to remove it from the library."),(0,i.kt)("h2",{id:"bad-design-of-patterntemplate"},"Bad design of ",(0,i.kt)("inlineCode",{parentName:"h2"},"Pattern::template()")),(0,i.kt)("p",null,"Some time back, we introduce ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern::template()")," as a way of building patterns using a fluent builder.\nYou could specify a template with ",(0,i.kt)("inlineCode",{parentName:"p"},"@")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"&")," placeholders inside. ",(0,i.kt)("inlineCode",{parentName:"p"},"@")," placeholders would be injected\nwith the values, while ",(0,i.kt)("inlineCode",{parentName:"p"},"&")," would be injected with patterns, like masks."),(0,i.kt)("p",null,"After the review of the interface, we admit that was a bad interface from the start. We didn't think it through."),(0,i.kt)("p",null,"We decided that two placeholders, ",(0,i.kt)("inlineCode",{parentName:"p"},"@")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"&")," were superfluous, and we could easily achieve the\nsame effect with just one. Additionally, we decided that we shouldn't have tied the template to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Pattern::inject()"),"\nin such a crude way."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'Pattern::template(\'&, @, &, @\')\n    ->literal()                   // replace the first "&" with "&"\n    ->mask($mask, $keywords)      // replace the second "&" with the mask\n    ->inject([$first, $second]);  // replace the first and the second "@" with values\n')),(0,i.kt)("p",null,"We admit that this design was as bad as it could ever be, we hated using that in production. It must be eliminated."),(0,i.kt)("p",null,"Instead, the new API will look similar to this one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'Pattern::template(\'@, @, @, @\')\n    ->literal(\'&\')      // replace the first "@" with "&"\n    ->literal($first)   // replace the second "@" with value\n    ->mask($mask, $keywords) // replace the third "@" with the mask\n    ->literal($second)  // replace the fourth "@" with value\n    ->build();\n')),(0,i.kt)("p",null,"Which we believe looks cleaner, is more description, conveys intention and is prone to\ncreate less bugs, in our opinions."))}u.isMDXComponent=!0}}]);
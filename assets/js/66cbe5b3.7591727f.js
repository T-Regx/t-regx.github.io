"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1619],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(a),m=r,k=d["".concat(o,".").concat(m)]||d[m]||u[m]||l;return a?n.createElement(k,i(i({ref:t},s),{},{components:a})):n.createElement(k,i({ref:t},s))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<l;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1755:(e,t,a)=>{a.d(t,{O2:()=>h,x4:()=>g});var n=a(7294),r=a(944),l=a(6010);const i="tabItem_vU9c",c="tabItemActive_cw6a";var o=37,p=39;const s=function(e){var t=e.lazy,a=e.block,s=e.defaultValue,u=e.values,d=e.groupId,m=e.className,k=(0,r.Z)(),h=k.tabGroupChoices,f=k.setTabGroupChoices,b=(0,n.useState)(s),g=b[0],y=b[1],v=n.Children.toArray(e.children),N=[];if(null!=d){var w=h[d];null!=w&&w!==g&&u.some((function(e){return e.value===w}))&&y(w)}var x=function(e){var t=e.currentTarget,a=N.indexOf(t),n=u[a].value;y(n),null!=d&&(f(d,n),setTimeout((function(){var e,a,n,r,l,i,o,p;(e=t.getBoundingClientRect(),a=e.top,n=e.left,r=e.bottom,l=e.right,i=window,o=i.innerHeight,p=i.innerWidth,a>=0&&l<=p&&r<=o&&n>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(c),setTimeout((function(){return t.classList.remove(c)}),2e3))}),150))},C=function(e){var t,a;switch(e.keyCode){case p:var n=N.indexOf(e.target)+1;a=N[n]||N[0];break;case o:var r=N.indexOf(e.target)-1;a=N[r]||N[N.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},m)},u.map((function(e){var t=e.value,a=e.label;return n.createElement("li",{role:"tab",tabIndex:g===t?0:-1,"aria-selected":g===t,className:(0,l.Z)("tabs__item",i,{"tabs__item--active":g===t}),key:t,ref:function(e){return N.push(e)},onKeyDown:C,onFocus:x,onClick:x},a)}))),t?(0,n.cloneElement)(v.filter((function(e){return e.props.value===g}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},v.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==g})}))))};const u=function(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)};var d=a(5558);const m="code_JkvM",k=function(e){var t=e.children,a=e.language;return n.createElement("div",{className:m},n.createElement(d.Z,{className:"language-"+(a||"php")},function(e){if("string"==typeof e)return e;if(!Array.isArray(e))throw console.log(this.props.children),"Unexpected child of <Code>";if(e.every((function(e){return"string"==typeof e})))return e.join("")}(t)))};const h=function(e){var t=e.tregx,a=e.php;return n.createElement(s,{defaultValue:"t-regx",values:f(t,a)},t&&n.createElement(u,{value:"t-regx"},n.createElement(k,null,t)),a&&n.createElement(u,{value:"php"},n.createElement(k,null,a)))};function f(e,t){return[e?{label:"T-Regx",value:"t-regx"}:{},t?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}))}const b="result_6Tn1",g=function(e){var t=e.text,a=e.children;return n.createElement("div",{className:b},n.createElement(k,{language:t?"text":"php"},a))}},2142:(e,t,a)=>{a.r(t),a.d(t,{default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var n=a(7462),r=a(3366),l=(a(7294),a(3905)),i=a(1755),c=["components"],o={id:"replace-callback",title:"Replace with callback"},p={unversionedId:"replace-callback",id:"replace-callback",isDocsHomePage:!1,title:"Replace with callback",description:"After replace(), you need to explicitly use one of first()/all()/only(int) methods, to express how many",source:"@site/../docs/replace-callback.mdx",sourceDirName:".",slug:"/replace-callback",permalink:"/docs/replace-callback",version:"current",lastUpdatedAt:1663873231,formattedLastUpdatedAt:"9/22/2022",frontMatter:{id:"replace-callback",title:"Replace with callback"},sidebar:"docs",previous:{title:"Replace with a constant value",permalink:"/docs/replace-with"},next:{title:"Handling user input",permalink:"/docs/handling-user-input"}},s=[{value:"Replace first",id:"replace-first",children:[]},{value:"Replace multiple",id:"replace-multiple",children:[{value:"<code>all()</code>",id:"all",children:[]},{value:"<code>only()</code>",id:"only",children:[]}]},{value:"Return types",id:"return-types",children:[{value:"Explicit string",id:"explicit-string",children:[]}]},{value:"Variable callbacks",id:"variable-callbacks",children:[]}],u={toc:s};function d(e){var t=e.components,a=(0,r.Z)(e,c);return(0,l.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"After ",(0,l.kt)("inlineCode",{parentName:"p"},"replace()"),", you need to explicitly use one of ",(0,l.kt)("inlineCode",{parentName:"p"},"first()"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"all()"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"only(int)")," methods, to express how many\nreplacements should be done."),(0,l.kt)("p",null,"Callback passed to ",(0,l.kt)("inlineCode",{parentName:"p"},"replace()->callback()")," will only be invoked:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"for ",(0,l.kt)("inlineCode",{parentName:"li"},"all()")," - as many times as there are occurrences matched in the subject."),(0,l.kt)("li",{parentName:"ul"},"for ",(0,l.kt)("inlineCode",{parentName:"li"},"only(int)")," - the same as ",(0,l.kt)("inlineCode",{parentName:"li"},"all()"),", but up to an ",(0,l.kt)("inlineCode",{parentName:"li"},"int")," limit."),(0,l.kt)("li",{parentName:"ul"},"for ",(0,l.kt)("inlineCode",{parentName:"li"},"first()")," - once if an occurrence is matched; or not at all if it's not.")),(0,l.kt)("h2",{id:"replace-first"},"Replace first"),(0,l.kt)(i.O2,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->first()->callback(function (Detail $detail) {\n    return strtoupper($detail->text());\n});",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace_callback('/[A-Z][a-z]+/', function (array $match) {\n    return strtoupper($match[0]);\n}, $subject, 1);",mdxType:"CodeTabs"}),(0,l.kt)(i.x4,{mdxType:"Result"},"'I like scandinavia: SWEDEN, Norway and Denmark'"),(0,l.kt)("h2",{id:"replace-multiple"},"Replace multiple"),(0,l.kt)("h3",{id:"all"},(0,l.kt)("inlineCode",{parentName:"h3"},"all()")),(0,l.kt)("p",null,"Replacing all matched occurrences is the most common use-case:"),(0,l.kt)(i.O2,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npattern('[A-Z][a-z]+')->replace($subject)->all()->callback(function (Detail $m) {\n    return strtoupper($m->text());\n});",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\npreg::replace_callback('/[A-Z][a-z]+/', function (array $m) {\n    return strtoupper($m[0]);\n}, $subject);",mdxType:"CodeTabs"}),(0,l.kt)(i.x4,{mdxType:"Result"},"'I like scandinavia: SWEDEN, NORWAY and DENMARK'"),(0,l.kt)("h3",{id:"only"},(0,l.kt)("inlineCode",{parentName:"h3"},"only()")),(0,l.kt)("p",null,"You can also limit the amount of replacements done with ",(0,l.kt)("inlineCode",{parentName:"p"},"only()"),"."),(0,l.kt)(i.O2,{tregx:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\n// In T-Regx, Detail can be cast to string, returning the whole match\npattern('[A-Z][a-z]+')->replace($subject)->only(2)->callback('strtoupper');",php:"$subject = 'I like scandinavia: Sweden, Norway and Denmark';\n\n// In Vanilla, $match is an array, and arrays won't cast to string that easily\npreg::replace_callback('/[A-Z][a-z]+/', function (array $match) {\n    // $match[0] can be an empty string, even if a group is not matched\n    return call_user_func('strtoupper', $match[0]);\n}, $subject, 2);",mdxType:"CodeTabs"}),(0,l.kt)(i.x4,{mdxType:"Result"},"'I like scandinavia: SWEDEN, NORWAY and Denmark'"),(0,l.kt)("h2",{id:"return-types"},"Return types"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"replace()->callback()")," only accepts ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,l.kt)("inlineCode",{parentName:"a"},"Detail"))," or ",(0,l.kt)("a",{parentName:"p",href:"/docs/match-groups"},(0,l.kt)("inlineCode",{parentName:"a"},"MatchGroup"))," as its return type."),(0,l.kt)("p",null,"We believe that returning anything, that's not a string, ",(0,l.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,l.kt)("inlineCode",{parentName:"a"},"Detail"))," or a group can ",(0,l.kt)("strong",{parentName:"p"},"be a sign of a bug"),'!\nMoreover, converting them silently would break our "Explicity rule".'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"pattern('\\w+')->replace(\"Apples are cool\")->first()->callback(function (Detail $detail) {\n    return 2;       // <- throws InvalidReturnValueException\n    return true;    // <- throws InvalidReturnValueException\n    return null;    // <- throws InvalidReturnValueException\n});\n")),(0,l.kt)("p",null,"Only ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,l.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,l.kt)("inlineCode",{parentName:"a"},"Detail"))," or ",(0,l.kt)("a",{parentName:"p",href:"/docs/match-groups"},(0,l.kt)("inlineCode",{parentName:"a"},"MatchGroup"))," are allowed."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"pattern('([A-Z])\\w+')->replace(\"Apples are cool\")->first()->callback(function (Detail $detail) {\n    return 'orange';         // string\n    return $detail;           // match\n    return $detail->group(1); // group\n});\n")),(0,l.kt)("h3",{id:"explicit-string"},"Explicit string"),(0,l.kt)("p",null,"If you'd like to replace an occurrence with a numeric value (for example ",(0,l.kt)("inlineCode",{parentName:"p"},"'12'"),"), an empty string or ",(0,l.kt)("inlineCode",{parentName:"p"},"'true'"),"/",(0,l.kt)("inlineCode",{parentName:"p"},"'false'"),"\nliterals - just return them as ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," ",(0,l.kt)("strong",{parentName:"p"},"explicitly"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"pattern('\\w+')->replace(\"Apples are cool\")->first()->callback(function (Detail $detail) {\n    return strval(2);                          // ok\n    return true ? 'true' : 'false';            // ok\n    return null ? '' : $something;             // ok\n\n    return $detail->text();                     // ok\n    return (string) $detail;                    // ok\n    return $detail->group('captured')->text();  // ok, if group exists and was matched\n\n    return $detail;                             // ok\n    return $detail->group('captured');          // ok, if group exists and was matched\n});\n")),(0,l.kt)("h2",{id:"variable-callbacks"},"Variable callbacks"),(0,l.kt)("p",null,"You can call ",(0,l.kt)("inlineCode",{parentName:"p"},"replace()->callback()")," for any valid PHP ",(0,l.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/language.types.callable.php"},(0,l.kt)("inlineCode",{parentName:"a"},"callable"))," which accepts one string parameter (or no parameters)\nand returns ",(0,l.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,l.kt)(i.O2,{tregx:"pattern('\\w+')->replace('Apples are cool')->first()->callback('strtoupper');",php:"// This code is actually impossible in Vanilla-PHP.\n// In T-Regx, Detail can be cast to string - that's the matched text\n// In Vanilla, $match is an array, and arrays won't cast to string that easily\n\n// preg::replace_callback('/\\w+/', 'strtoupper', $subject, 1);\n\npreg::replace_callback('/\\w+/', function (array $match) {\n    return strtoupper($match[0]);\n}, 'Apples are cool', 1);",mdxType:"CodeTabs"}),(0,l.kt)(i.x4,{mdxType:"Result"},"'APPLES are cool'"),(0,l.kt)("p",null,"In this example, ",(0,l.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,l.kt)("inlineCode",{parentName:"a"},"Detail"))," will be cast to string, which is the same as calling ",(0,l.kt)("inlineCode",{parentName:"p"},"Detail.text()")," method."))}d.isMDXComponent=!0}}]);
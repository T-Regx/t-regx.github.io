"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5918],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=u(n),d=a,h=s["".concat(l,".").concat(d)]||s[d]||m[d]||o;return n?r.createElement(h,p(p({ref:t},c),{},{components:n})):r.createElement(h,p({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,p=new Array(o);p[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[s]="string"==typeof e?e:a,p[1]=i;for(var u=2;u<o;u++)p[u]=n[u];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6915:(e,t,n)=>{n.r(t),n.d(t,{default:()=>s,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),p=["components"],i={title:"Capturing groups update",author:"Daniel Wilkowski",authorFBID:0x5af34da0d14b},l={permalink:"/blog/2018/09/01/groups",source:"@site/blog/2018-09-01-groups.md",title:"Capturing groups update",description:"One update about groups, not to cause confusion. $match->groups() treats indexes a bit different than $match->group(int).",date:"2018-09-01T00:00:00.000Z",formattedDate:"September 1, 2018",tags:[],readingTime:.855,truncated:!0,prevItem:{title:"Welcome T-Regx",permalink:"/blog/2018/09/24/welcome-t-regx"},nextItem:{title:"Support for PHP 5.3",permalink:"/blog/2018/03/03/php-5.3-support"}},u=[],c={toc:u};function s(e){var t=e.components,n=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"One update about groups, not to cause confusion. ",(0,o.kt)("inlineCode",{parentName:"p"},"$match->groups()")," treats indexes a bit different than ",(0,o.kt)("inlineCode",{parentName:"p"},"$match->group(int)"),".\nRead on to learn more :)"),(0,o.kt)("p",null,"Anyone who worked with regular expressions knows, that group ",(0,o.kt)("inlineCode",{parentName:"p"},"0")," is a whole match. I don't want to break\nthat convention. That is why I assumed that they must be equal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$match->group(0) === $match->text()\n")),(0,o.kt)("p",null,"Having said that, I still want to distinguish a method which returns groups and the one that returns a whole match.\nSo ",(0,o.kt)("inlineCode",{parentName:"p"},"$match->groups()")," ",(0,o.kt)("strong",{parentName:"p"},"doesn't")," return the whole match at index ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),", while ",(0,o.kt)("inlineCode",{parentName:"p"},"$match->group()")," does."),(0,o.kt)("p",null,"You can think of ",(0,o.kt)("inlineCode",{parentName:"p"},"$this->group(int)")," method as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"return [$this->text(), ...$this->groups()];\n")),(0,o.kt)("p",null,"So..."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$match->group(0) == $match->text();\n$match->group(1) == $match->groups()[0];\n$match->group(2) == $match->groups()[1];\n$match->group(3) == $match->groups()[2];\n$match->group(4) == $match->groups()[3];\n")),(0,o.kt)("p",null,"And a quick update about the CleanRegex:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"I added a ",(0,o.kt)("inlineCode",{parentName:"li"},"ReadMeTest")," testcase, which asserts that all code used in ReadMe.md has the presented results."),(0,o.kt)("li",{parentName:"ul"},"New ",(0,o.kt)("inlineCode",{parentName:"li"},"->first()"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"->all()")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"->only()")," methods to ",(0,o.kt)("strong",{parentName:"li"},"explicitly")," match/replace certain amount of occurrences.\nThis will also be used with capturing groups.")))}s.isMDXComponent=!0}}]);
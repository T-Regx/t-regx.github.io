"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1578],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=m(a),c=r,h=d["".concat(l,".").concat(c)]||d[c]||u[c]||i;return a?n.createElement(h,o(o({ref:t},s),{},{components:a})):n.createElement(h,o({ref:t},s))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[d]="string"==typeof e?e:r,o[1]=p;for(var m=2;m<i;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},6172:(e,t,a)=>{a.r(t),a.d(t,{default:()=>d,frontMatter:()=>p,metadata:()=>l,toc:()=>m});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],p={id:"match-groups",title:"Capturing groups"},l={unversionedId:"match-groups",id:"match-groups",isDocsHomePage:!1,title:"Capturing groups",description:"When using [pattern()->match()] and [pattern()->replace->callback()], some methods receive a callback that accepts [Detail]",source:"@site/../docs/match-groups.md",sourceDirName:".",slug:"/match-groups",permalink:"/docs/match-groups",version:"current",lastUpdatedAt:1672489628,formattedLastUpdatedAt:"12/31/2022",frontMatter:{id:"match-groups",title:"Capturing groups"},sidebar:"docs",previous:{title:"Match details",permalink:"/docs/match-details"},next:{title:"Match offsets",permalink:"/docs/match-offsets"}},m=[{value:"Overview",id:"overview",children:[]},{value:"Group text",id:"group-text",children:[]},{value:"Group details",id:"group-details",children:[{value:"Index, name and identifier",id:"index-name-and-identifier",children:[]}]},{value:"Optional Groups",id:"optional-groups",children:[]},{value:"Nonexistent Groups",id:"nonexistent-groups",children:[{value:"Invalid groups and arguments",id:"invalid-groups-and-arguments-1",children:[]}]},{value:"Invalid group names",id:"invalid-group-names",children:[]},{value:"Composite groups",id:"composite-groups",children:[{value:"Group names",id:"group-names",children:[]},{value:"Groups count",id:"groups-count",children:[]}]},{value:"Other occurrences",id:"other-occurrences",children:[]},{value:"Complication with <code>J</code> modifier",id:"complication-with-j-modifier",children:[]},{value:"Groups In-Depth",id:"groups-in-depth",children:[]}],s={toc:m};function d(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When using ",(0,i.kt)("a",{parentName:"p",href:"/docs/match"},(0,i.kt)("inlineCode",{parentName:"a"},"pattern()->match()"))," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/replace-callback"},(0,i.kt)("inlineCode",{parentName:"a"},"pattern()->replace->callback()")),", some methods receive a callback that accepts ",(0,i.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,i.kt)("inlineCode",{parentName:"a"},"Detail")),"\ndetails object. These methods are: ",(0,i.kt)("a",{parentName:"p",href:"/docs/match-for-each"},(0,i.kt)("inlineCode",{parentName:"a"},"forEach()")),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/match-map"},(0,i.kt)("inlineCode",{parentName:"a"},"map()")),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/match-flat-map"},(0,i.kt)("inlineCode",{parentName:"a"},"flatMap()")),", ",(0,i.kt)("inlineCode",{parentName:"p"},"filter()"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/replace-callback"},(0,i.kt)("inlineCode",{parentName:"a"},"callback()")),"."),(0,i.kt)("p",null,"The details can be used to get concise information about the matched occurrence, such as its value\n(i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},'"the whole match"'),"), capturing groups and their UTF-8/raw offsets, limits, indexes, other matches as well as the\nused subject (although it could also be pass as a closure parameter) and more."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This page only concerns ",(0,i.kt)("strong",{parentName:"p"},"capturing groups")," of ",(0,i.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,i.kt)("inlineCode",{parentName:"a"},"Detail")),', specifically. See "',(0,i.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,i.kt)("inlineCode",{parentName:"a"},"Detail")),'" for a more throughout\ndocumentation.'))),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Using ",(0,i.kt)("a",{parentName:"p",href:"/docs/match-details"},(0,i.kt)("inlineCode",{parentName:"a"},"Detail")),", you gain access complete information about capturing groups:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#group-text"},(0,i.kt)("inlineCode",{parentName:"a"},"get(int|string)"))," - capturing group text value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#group-details"},(0,i.kt)("inlineCode",{parentName:"a"},"group(int|string)"))," - capturing group details, with:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"text()")," - value of the group, as ",(0,i.kt)("inlineCode",{parentName:"li"},"string")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"toInt()")," - value of the group, cast to ",(0,i.kt)("inlineCode",{parentName:"li"},"int")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"isInt()")," - whether the group is a valid integer (e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," for group ",(0,i.kt)("inlineCode",{parentName:"li"},"(\\d+)"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#offsets"},"offsets of matched values")," in the subject:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"character offsets (UTF-8 safe) - ",(0,i.kt)("inlineCode",{parentName:"li"},"offset()")),(0,i.kt)("li",{parentName:"ul"},"byte offsets - ",(0,i.kt)("inlineCode",{parentName:"li"},"byteOffset()")))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#index-name-and-identifier"},(0,i.kt)("inlineCode",{parentName:"a"},"index()"))," - ordinal value of the capturing group in a pattern"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#index-name-and-identifier"},(0,i.kt)("inlineCode",{parentName:"a"},"name()"))," - name of the capturing group, or ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," of group is not named"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#other-occurrences"},(0,i.kt)("inlineCode",{parentName:"a"},"all()"))," - other matched occurrences of the group"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#optional-groups"},(0,i.kt)("inlineCode",{parentName:"a"},"matched(int|string)"))," - whether the group was matched by the subject"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#nonexistent-groups"},(0,i.kt)("inlineCode",{parentName:"a"},"groupExists(int|string)"))," - whether group was used in a pattern"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#composite-groups"},(0,i.kt)("inlineCode",{parentName:"a"},"groups()")),"/",(0,i.kt)("a",{parentName:"li",href:"#composite-groups"},(0,i.kt)("inlineCode",{parentName:"a"},"namedGroups()"))," - interface for composite operations for all groups"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#group-names"},(0,i.kt)("inlineCode",{parentName:"a"},"groupNames()"))," - string list of named groups used in a pattern"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#groups-count"},(0,i.kt)("inlineCode",{parentName:"a"},"groupsCount()"))," - counts number of capturing groups (without duplicates of named and regular groups)")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All types of group syntax: ",(0,i.kt)("inlineCode",{parentName:"p"},"(?<name>)"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"(?'name')")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"(?P<name>)"),' are considered "named". Regular, indexed groups\nare use with syntax ',(0,i.kt)("inlineCode",{parentName:"p"},"()"),". Group ",(0,i.kt)("inlineCode",{parentName:"p"},"(?:)")," is considered a non-capturing group."))),(0,i.kt)("h2",{id:"group-text"},"Group text"),(0,i.kt)("p",null,"To get a value of a capturing group from, use ",(0,i.kt)("inlineCode",{parentName:"p"},"Detail.get()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"pattern('\\d+(?<unit>..)')->match('14cm')->first(function (Detail $detail) {\n    // highlight-next-line\n    $detail->get('value');   // 'cm'\n});\n")),(0,i.kt)("h2",{id:"group-details"},"Group details"),(0,i.kt)("p",null,"You can chain ",(0,i.kt)("inlineCode",{parentName:"p"},"Detail.group()")," with a variety of methods, you can use to get\nmore details about the group."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = '(?<value>\\d+)(?<unit>cm|mm)';\n$subject = '192mm and 168cm or 18mm and 12cm';\n\npattern($pattern)->match($subject)->forEach(function (Detail $detail) {\n    \n    $detail->group('value')->text();    // '168' (string)\n    $detail->group('value')->isInt();   // true  (boolean)\n    $detail->group('value')->toInt();   // 168   (int)\n    \n    $detail->group('unit')->offset();   // 13\n    $detail->group('unit')->tail();     // 15\n    $detail->group('unit')->text();     // 'cm'\n    $detail->group('unit')->isInt();    // false\n    $detail->group('unit')->toInt();    // throws IntegerFormatException\n    \n    $detail->group('unit')->index();    // 2\n    $detail->group(2)->name();          // 'unit'\n});\n")),(0,i.kt)("h3",{id:"index-name-and-identifier"},"Index, name and identifier"),(0,i.kt)("p",null,"Groups can be referred to either by an index or by name, if the group in a pattern is named. What was the group referred\nwith is called an identifier. If group was referred to by an index, then the index is the identifier."),(0,i.kt)("p",null,"T-Regx has 2 separate methods for each of the group reference method:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"index()")," - returns the ordinal number of a group"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name()")," - returns the name of a group, or ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," if the group is not named")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = Pattern::of('(?<schema>https?://)?\\w+\\.\\w+');\n\n$detail = $pattern->match($subject)->first();\n\n$detail->group(1)->index();                  //  1\n$detail->group('schema')->index();           //  1\n\n$detail->group(1)->name();                   // 'schema'\n$detail->group('schema')->name();            // 'schema'\n")),(0,i.kt)("h2",{id:"optional-groups"},"Optional Groups"),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"matched(int|string)")," allows you to verify whether a given group was matched by the subject:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = pattern('(https?://)?\\w+\\.\\w+');\n$matcher = $pattern->match('Links: google.com and http://facebook.com');\n\n$matcher->forEach(function (Detail $detail) {\n    // first iteration\n    $detail->text();       // 'google.com'\n    $detail->matched(1);   // false, `google.com` doesn't have a schema \n    $detail->get(1);       // GroupNotMatchedException\n    \n    // second iteration\n    $detail->text();       // 'http://facebook.com'    \n    $detail->matched(1);   // true, `http://facebook.com` does have a schema \n    $detail->get(1);       // 'http://'    \n});\n")),(0,i.kt)("p",null,"It'll work just as well with named groups:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = Pattern::of('(?<schema>https?://)?\\w+\\.\\w+');\n\n$detail = $pattern->match($subject)->first();\n\n$detail->text();              // 'google.com'  \n$detail->matched('schema');   // false, `google.com` doesn't have a schema \n$detail->get('schema');       // GroupNotMatchedException\n")),(0,i.kt)("p",null,"Although method ",(0,i.kt)("inlineCode",{parentName:"p"},"$detail->matched(int|string)")," is the preferred way - same effect can be achieved with\nusing ",(0,i.kt)("inlineCode",{parentName:"p"},"$detail->group(int|string)->matched()"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = Pattern::of('(?<schema>https?://)?\\w+\\.\\w+');\n\n$detail = $pattern->match($subject)->first();\n\n$detail->matched('schema');            // false, `google.com` doesn't have a schema\n$detail->group('schema')->matched();   // identical\n")),(0,i.kt)("h4",{id:"invalid-groups-and-arguments"},"Invalid groups and arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"matched()")," will throw ",(0,i.kt)("inlineCode",{parentName:"li"},"NonexistentGroupException"),", when used with a non-existent group ",(0,i.kt)("em",{parentName:"li"},"(i.e. ",(0,i.kt)("inlineCode",{parentName:"em"},"asdf"),")"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"matched()")," will throw ",(0,i.kt)("a",{parentName:"li",href:"https://www.php.net/manual/en/class.invalidargumentexception.php"},(0,i.kt)("inlineCode",{parentName:"a"},"\\InvalidArgumentException")),", when used with an invalid group ",(0,i.kt)("em",{parentName:"li"},"(i.e. ",(0,i.kt)("inlineCode",{parentName:"em"},"2group"),", ",(0,i.kt)("inlineCode",{parentName:"em"},"-1")," or any\ntype other than ",(0,i.kt)("inlineCode",{parentName:"em"},"string")," or ",(0,i.kt)("inlineCode",{parentName:"em"},"int"),")"),".")),(0,i.kt)("h2",{id:"nonexistent-groups"},"Nonexistent Groups"),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"groupExists(int|string)")," allows you to verify whether the group was used in a pattern:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = pattern('(?<value>\\d+)(?<unit>cm|mm)?');\n\n$detail = $pattern->match('14')->first();\n\n$detail->groupExists('value');  // true\n$detail->groupExists('unit');   // true, group exists in pattern\n$detail->groupExists('other');  // false, group doesn't exist in pattern\n\n$detail->matched('value');   // true\n$detail->matched('unit');    // false, group exists, but was not matched in pattern\n$detail->matched('other');   // NonexistentGroupException\n")),(0,i.kt)("p",null,"It'll work just the same with regular (not named) groups:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = pattern('(?<value>\\d+)(?<unit>cm|mm)');\n\n$detail = $pattern->match('')->first();\n$detail->groupExists(0);  // true\n$detail->groupExists(1);  // true\n$detail->groupExists(2);  // false\n")),(0,i.kt)("h3",{id:"invalid-groups-and-arguments-1"},"Invalid groups and arguments"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"groupExists()")," will throw ",(0,i.kt)("a",{parentName:"li",href:"https://www.php.net/manual/en/class.invalidargumentexception.php"},(0,i.kt)("inlineCode",{parentName:"a"},"\\InvalidArgumentException")),", when used with an invalid group ",(0,i.kt)("em",{parentName:"li"},"(i.e. ",(0,i.kt)("inlineCode",{parentName:"em"},"2group"),", ",(0,i.kt)("inlineCode",{parentName:"em"},"-1")," or any\ntype other than ",(0,i.kt)("inlineCode",{parentName:"em"},"string")," or ",(0,i.kt)("inlineCode",{parentName:"em"},"int"),")"),".")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Usages of ",(0,i.kt)("inlineCode",{parentName:"p"},"groupExists()")," are rather infrequent, because rarely patterns are dynamic - they're constant much more often;\nhence the developer doesn't have to check whether the group exists."))),(0,i.kt)("h2",{id:"invalid-group-names"},"Invalid group names"),(0,i.kt)("p",null,"When any group method is called with an invalid group name, for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$detail->groupExists('**');\n$detail->matched('**');\n$detail->group('**')->text();\n$detail->get('**');\n")),(0,i.kt)("p",null,"then ",(0,i.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/class.invalidargumentexception.php"},(0,i.kt)("inlineCode",{parentName:"a"},"\\InvalidArgumentException"))," is thrown."),(0,i.kt)("h2",{id:"composite-groups"},"Composite groups"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Detail.groups()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Detail.namedGroups()")," return a list of capturing groups, same\nas ",(0,i.kt)("inlineCode",{parentName:"p"},"Detail.group(string|int)"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = pattern('(?<value>\\d+)(?<unit>cm|mm)');\n$matcher = $pattern->match('192mm and 168cm or 18mm and 12cm');\n\n$matcher->forEach(function (Detail $detail) { \n    [$value, $unit] = $detail->groups();\n    \n    $value->text(); // '192'\n    $unit->text(); // 'mm'\n});\n")),(0,i.kt)("p",null,"If a group is not matched, it will be represented as ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," in the list."),(0,i.kt)("h3",{id:"group-names"},"Group names"),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"groupNames()")," returns a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"string[]")," with names of the capturing groups in order:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = Pattern::of('(?<value>\\d+)(?<unit>cm|mm)');\n$detail = $pattern->match('14cm')->first();\n$detail->groupNames();   // ['value', 'unit']\n")),(0,i.kt)("p",null,"If a group isn't named, it's represented by ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"pattern('(?<value>\\d+)(cm|mm)')->match('14cm')->map(function (Detail $detail) {\n    $detail->groupNames();   // ['value', null]\n});\n")),(0,i.kt)("h3",{id:"groups-count"},"Groups count"),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"groupsCount()")," returns the number of capturing groups (without duplicates of named and regular groups)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = pattern('(?<value>\\d+)(?<unit>cm|mm)');\n$detail = $pattern->match('14cm')->first();\n$detail->groupsCount();   // 2\n")),(0,i.kt)("h2",{id:"other-occurrences"},"Other occurrences"),(0,i.kt)("p",null,"Method ",(0,i.kt)("inlineCode",{parentName:"p"},"group()->all()")," allows you to gain access to the occurrence of the group in other matches in the subject."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = Pattern::of('(?<value>\\d+)(?<unit>cm|mm)');\n$matcher = $pattern->match('192mm and 168cm or 18mm and 12cm');\n\n$detail = $matcher->first();\n\n$detail->group('value')->all();   // ['192', '168', '18', '12']\n$detail->group('unit')->all();    // ['mm', 'cm', 'mm', 'cm']\n")),(0,i.kt)("p",null,"If the group is not matched in other occurrences, its value in ",(0,i.kt)("inlineCode",{parentName:"p"},"all()")," result array will be ",(0,i.kt)("inlineCode",{parentName:"p"},"null"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$pattern = pattern('(?<value>\\d+)(?<unit>cm|mm)?');\n$matcher = $pattern->match('192mm and 168 or 18mm and 12');\n\n$detail = $matcher->first();\n\n$detail->group('value')->all();   // ['192', '168', '18', '12']\n$detail->group('unit')->all();    // ['mm', null, 'mm', null]\n")),(0,i.kt)("p",null,"In other words ",(0,i.kt)("inlineCode",{parentName:"p"},"Detail.group($x).all()")," is a collection of occurrences of group ",(0,i.kt)("inlineCode",{parentName:"p"},"$x")," in all other matches."),(0,i.kt)("h2",{id:"complication-with-j-modifier"},"Complication with ",(0,i.kt)("inlineCode",{parentName:"h2"},"J")," modifier"),(0,i.kt)("p",null,"Complication with ",(0,i.kt)("inlineCode",{parentName:"p"},"J"),' modifier is a rather advanced matter, and not necessary for everyday use.\nIf you don\'t seek "in-depth" understanding of capturing groups, feel free to skip this chapter.'),(0,i.kt)("p",null,"To learn more, go to ",(0,i.kt)("a",{parentName:"p",href:"/docs/match-groups-j-modifier"},"Capturing groups - J modifier"),"."),(0,i.kt)("h2",{id:"groups-in-depth"},"Groups In-Depth"),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},'Groups In-Depth is a rather advanced matter, and not necessary for everyday use.\nIf you don\'t seek "in-depth" understanding of capturing groups, feel free to skip this chapter.'))),(0,i.kt)("p",null,"To learn more, go to ",(0,i.kt)("a",{parentName:"p",href:"/docs/match-groups-in-depth"},"Capturing groups - in depth"),"."))}d.isMDXComponent=!0}}]);
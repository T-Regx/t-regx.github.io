"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4825],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1755:(e,t,n)=>{n.d(t,{O2:()=>f,x4:()=>k});var r=n(7294),a=n(944),i=n(6010);const o="tabItem_vU9c",l="tabItemActive_cw6a";var s=37,c=39;const p=function(e){var t=e.lazy,n=e.block,p=e.defaultValue,d=e.values,u=e.groupId,m=e.className,h=(0,a.Z)(),f=h.tabGroupChoices,v=h.setTabGroupChoices,g=(0,r.useState)(p),k=g[0],b=g[1],y=r.Children.toArray(e.children),w=[];if(null!=u){var N=f[u];null!=N&&N!==k&&d.some((function(e){return e.value===N}))&&b(N)}var x=function(e){var t=e.currentTarget,n=w.indexOf(t),r=d[n].value;b(r),null!=u&&(v(u,r),setTimeout((function(){var e,n,r,a,i,o,s,c;(e=t.getBoundingClientRect(),n=e.top,r=e.left,a=e.bottom,i=e.right,o=window,s=o.innerHeight,c=o.innerWidth,n>=0&&i<=c&&a<=s&&r>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(l),setTimeout((function(){return t.classList.remove(l)}),2e3))}),150))},P=function(e){var t,n;switch(e.keyCode){case c:var r=w.indexOf(e.target)+1;n=w[r]||w[0];break;case s:var a=w.indexOf(e.target)-1;n=w[a]||w[w.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},m)},d.map((function(e){var t=e.value,n=e.label;return r.createElement("li",{role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,className:(0,i.Z)("tabs__item",o,{"tabs__item--active":k===t}),key:t,ref:function(e){return w.push(e)},onKeyDown:P,onFocus:x,onClick:x},n)}))),t?(0,r.cloneElement)(y.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},y.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==k})}))))};const d=function(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)};var u=n(5558);const m="code_JkvM",h=function(e){var t=e.children,n=e.language;return r.createElement("div",{className:m},r.createElement(u.Z,{className:"language-"+(n||"php")},function(e){if("string"==typeof e)return e;if(!Array.isArray(e))throw console.log(this.props.children),"Unexpected child of <Code>";if(e.every((function(e){return"string"==typeof e})))return e.join("")}(t)))};const f=function(e){var t=e.tregx,n=e.php;return r.createElement(p,{defaultValue:"t-regx",values:v(t,n)},t&&r.createElement(d,{value:"t-regx"},r.createElement(h,null,t)),n&&r.createElement(d,{value:"php"},r.createElement(h,null,n)))};function v(e,t){return[e?{label:"T-Regx",value:"t-regx"}:{},t?{label:"PHP",value:"php"}:{}].filter((function(e){return e.value}))}const g="result_6Tn1",k=function(e){var t=e.text,n=e.children;return r.createElement("div",{className:g},r.createElement(h,{language:t?"text":"php"},n))}},1115:(e,t,n)=>{n.r(t),n.d(t,{default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=n(1755),l=["components"],s={id:"delimiters",title:"Automatic delimiters"},c={unversionedId:"delimiters",id:"delimiters",isDocsHomePage:!1,title:"Automatic delimiters",description:"This chapter doesn't contain PHP code snippets, because PHP PCRE require delimiters. There is no way to omit them",source:"@site/../docs/delimiters.mdx",sourceDirName:".",slug:"/delimiters",permalink:"/docs/delimiters",version:"current",lastUpdatedAt:1663873231,formattedLastUpdatedAt:"9/22/2022",frontMatter:{id:"delimiters",title:"Automatic delimiters"},sidebar:"docs",previous:{title:"Composite Pattern",permalink:"/docs/composite-pattern"},next:{title:"Count occurrences",permalink:"/docs/count"}},p=[{value:"Overview",id:"overview",children:[]},{value:"Delimited pattern",id:"delimited-pattern",children:[]},{value:"PCRE-style patterns",id:"pcre-style-patterns",children:[]},{value:"Flags",id:"flags",children:[]},{value:"I want to break it",id:"i-want-to-break-it",children:[]}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This chapter doesn't contain ",(0,i.kt)("inlineCode",{parentName:"p"},"PHP")," code snippets, because PHP PCRE require delimiters. There is no way to omit them\nin Vanilla PHP."))),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"Thanks to automatic delimiters, one can use regular expressions without ",(0,i.kt)("a",{parentName:"p",href:"/docs/overview#brain-strain"},"brain strain")," and without spending time,\nchoosing a suitable delimiter."),(0,i.kt)(o.O2,{tregx:"pattern('#[A-Z]/[a-z]+')->match($subject)->all();",php:"preg_match_all('%#[A-Z]/[a-z]+%', $subject);",mdxType:"CodeTabs"}),(0,i.kt)("h2",{id:"delimited-pattern"},"Delimited pattern"),(0,i.kt)("p",null,"Calling method ",(0,i.kt)("inlineCode",{parentName:"p"},"delimited()")," on any instance of T-Regx ",(0,i.kt)("inlineCode",{parentName:"p"},"PatternInterface")," returns\na pattern, as it will be used with ",(0,i.kt)("a",{parentName:"p",href:"https://www.php.net/manual/en/ref.pcre.php"},"PHP PCRE methods"),"."),(0,i.kt)(o.O2,{tregx:"echo pattern('Welcome/Or not')->delimited() . \"\\n\";\necho pattern('https://github.com#heading')->delimited() . \"\\n\";\necho pattern('https://github.com#heading?key=hello%20there')->delimited() . \"\\n\";",mdxType:"CodeTabs"}),(0,i.kt)(o.x4,{text:!0,mdxType:"Result"},"#Welcome/Or not#\n%https://github.com#heading%\n~https://github.com#heading?key=hello%20there~\n"),(0,i.kt)("h2",{id:"pcre-style-patterns"},"PCRE-style patterns"),(0,i.kt)("p",null,"If the was constructed with ",(0,i.kt)("a",{parentName:"p",href:"/docs/introduction-safe#entry-points"},(0,i.kt)("inlineCode",{parentName:"a"},"PcrePattern::of()")),", method ",(0,i.kt)("inlineCode",{parentName:"p"},"delimited()")," returns the pattern unchanged."),(0,i.kt)(o.O2,{tregx:"PcrePattern::of('#Welcome/Or not#')->delimited();",mdxType:"CodeTabs"}),(0,i.kt)(o.x4,{text:!0,mdxType:"Result"},"#Welcome/Or not#"),(0,i.kt)("h2",{id:"flags"},"Flags"),(0,i.kt)("p",null,"There are two ways of using patterns with PCRE modifiers:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Either pass a second argument to ",(0,i.kt)("a",{parentName:"p",href:"/docs/introduction-safe#entry-points"},(0,i.kt)("inlineCode",{parentName:"a"},"pattern()")),"/",(0,i.kt)("a",{parentName:"p",href:"/docs/introduction-safe#entry-points"},(0,i.kt)("inlineCode",{parentName:"a"},"Pattern::of()")),":"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"// global function\npattern('[A-Z][a-z]+', 'i')->match($subject)->first();\n\n// static method\nPattern::of('[A-Z][a-z]+', 'i')->match($subject)->first();\n\n// prepared patterns\nPattern::inject('[A-Z]@', [$_GET['name']], 'i')->search($subject)->first();\n"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"or use an old-school pattern:"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"PcrePattern::of('/[A-Z][a-z]+/i')->search($subject)->first();\n")))),(0,i.kt)("h2",{id:"i-want-to-break-it"},"I want to break it"),(0,i.kt)("p",null,"T-Regx has a set of predefined, suitable delimiters (like ",(0,i.kt)("inlineCode",{parentName:"p"},"/"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"#"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"~"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"%"),", etc.) and simply uses the first one, that\ndoesn't occur in your pattern. If you exhaust each of them; if you use every possible, predefined,\nsuitable delimiter - it will throw ",(0,i.kt)("inlineCode",{parentName:"p"},"ExplicitDelimiterRequiredException"),"."),(0,i.kt)("p",null,"In that case, you simply have to use an explicit delimiter with ",(0,i.kt)("a",{parentName:"p",href:"/docs/introduction-safe#entry-points"},(0,i.kt)("inlineCode",{parentName:"a"},"PcrePattern::of()")),"."),(0,i.kt)("p",null,"If you think another automatic delimiter can be used, please create ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/T-Regx/T-Regx/issues/new/choose"},"a github issue"),"."))}u.isMDXComponent=!0}}]);
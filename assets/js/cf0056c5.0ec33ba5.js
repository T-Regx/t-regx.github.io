"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9006],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,f=c["".concat(p,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(f,o(o({ref:t},u),{},{components:n})):a.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var s=2;s<l;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2052:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],i={title:"Welcome T-Regx",author:"Daniel Wilkowski",authorFBID:0x5af34da0d14b},p={permalink:"/blog/2018/09/24/welcome-t-regx",source:"@site/blog/2018-09-24-welcome-t-regx.md",title:"Welcome T-Regx",description:"The library changes its name! Now it's called T-Regx! It's a combination of",date:"2018-09-24T00:00:00.000Z",formattedDate:"September 24, 2018",tags:[],readingTime:1.33,truncated:!0,prevItem:{title:"Santa Clause Day Update",permalink:"/blog/2018/12/06/santa-clause-update"},nextItem:{title:"Capturing groups update",permalink:"/blog/2018/09/01/groups"}},s=[],u={toc:s};function m(e){var t=e.components,n=(0,r.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The library changes its name! Now it's called ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/T-Regx/T-Regx"},"T-Regx"),"! It's a combination of\nwords ",(0,l.kt)("em",{parentName:"p"},'"T-Rex"')," - the dinosaur - and ",(0,l.kt)("em",{parentName:"p"},'"RegExp"'),"."),(0,l.kt)("p",null,"Also, I've invested much more time into the development of ",(0,l.kt)("del",{parentName:"p"},"CleanRegex")," T-Regx. Read on, for a detailed list of features."),(0,l.kt)("p",null,"Here are the results:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Library changed its name. :D"),(0,l.kt)("li",{parentName:"ul"},"PHP silences almost all of buggy situations, so T-Regx is now throwing different exceptions for:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Invalid pattern - ",(0,l.kt)("em",{parentName:"li"},"should never happen in prod")),(0,l.kt)("li",{parentName:"ul"},"Unmatched subject - should be handled by the developer"),(0,l.kt)("li",{parentName:"ul"},"Invalid group name (like ",(0,l.kt)("inlineCode",{parentName:"li"},"_*"),") - ",(0,l.kt)("em",{parentName:"li"},"should never happen")),(0,l.kt)("li",{parentName:"ul"},"Nonexistent group name (one that wasn't used in a pattern) - ",(0,l.kt)("em",{parentName:"li"},"should never happen")),(0,l.kt)("li",{parentName:"ul"},"Group index exceeding number of groups - ",(0,l.kt)("em",{parentName:"li"},"should never happen")),(0,l.kt)("li",{parentName:"ul"},"Negative group index - ",(0,l.kt)("em",{parentName:"li"},"should never happen")),(0,l.kt)("li",{parentName:"ul"},"Group that wasn't matched by subject - should be handled by the developer"),(0,l.kt)("li",{parentName:"ul"},"Capture a split delimiter, that's not inside a capturing group - ",(0,l.kt)("em",{parentName:"li"},"should never happen")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"forFirst()"),' for matches, replacements and groups - useful in cases of "should be handled by the developer"'),(0,l.kt)("li",{parentName:"ul"},"PCRE returns offsets as bytes, always. T-Regx now returns these offsets as characters, using ",(0,l.kt)("inlineCode",{parentName:"li"},"mb_string")," extension.\nYou can still get offsets in bytes using ",(0,l.kt)("inlineCode",{parentName:"li"},"->byteOffset()")," method."),(0,l.kt)("li",{parentName:"ul"},"Added ",(0,l.kt)("inlineCode",{parentName:"li"},"CompositePattern")," class. It's used to perform operations of many patterns and on one subject, like:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Check if all patterns match a subject"),(0,l.kt)("li",{parentName:"ul"},"Check if any pattern matches a subject"),(0,l.kt)("li",{parentName:"ul"},"Invoke many replacements, and pass result of one ",(0,l.kt)("inlineCode",{parentName:"li"},"preg_replace()")," as a subject to the other.")))),(0,l.kt)("p",null,"But it's still a long way until ",(0,l.kt)("inlineCode",{parentName:"p"},"T-Regx 1.0")," is released. :)"))}m.isMDXComponent=!0}}]);